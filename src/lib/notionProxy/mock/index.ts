
import { mockState, MockConfig } from './state';
import { mockStorage } from './storage';
import { mockUtils } from './utils';
import { mockExporter } from './exporter';

/**
 * Utilitaire pour g√©rer le mode mock de l'API Notion
 */
export const mockMode = {
  /**
   * V√©rifie si le mode mock est actif
   */
  isActive(): boolean {
    return mockState.isActive();
  },
  
  /**
   * Active le mode mock
   */
  activate(): void {
    console.log('‚úÖ Mode mock activ√©');
    mockState.setActive(true);
    mockStorage.saveToStorage();
  },
  
  /**
   * D√©sactive le mode mock
   */
  deactivate(): void {
    // Ne pas d√©sactiver si le mode est permanent
    if (mockState.isPermanent()) {
      console.log('‚ö†Ô∏è Impossible de d√©sactiver le mode mock permanent');
      return;
    }
    
    console.log('‚úÖ Mode mock d√©sactiv√©');
    mockState.setActive(false);
    mockStorage.saveToStorage();
  },
  
  /**
   * Bascule entre mode mock actif et inactif
   */
  toggle(): boolean {
    if (mockState.isActive()) {
      this.deactivate();
    } else {
      this.activate();
    }
    return mockState.isActive();
  },
  
  /**
   * Force temporairement le mode r√©el pour une op√©ration
   */
  temporarilyForceReal(): void {
    mockState.setTemporarilyForceReal(true);
    console.log('üîÑ Mode r√©el forc√© temporairement');
  },
  
  /**
   * V√©rifie si le mode est temporairement forc√© en r√©el
   */
  isTemporarilyForcedReal(): boolean {
    return mockState.isTemporarilyForcedReal();
  },
  
  /**
   * Restaure l'√©tat original apr√®s un for√ßage temporaire
   */
  restoreState(): void {
    mockState.setTemporarilyForceReal(false);
    console.log(`üîÑ √âtat mock restaur√© (${mockState.getOriginalState() ? 'activ√©' : 'd√©sactiv√©'})`);
  },
  
  /**
   * Alternative √† restoreState pour plus de clart√© dans certains cas
   */
  restoreAfterForceReal(): void {
    this.restoreState();
  },
  
  /**
   * D√©finit le mode mock comme permanent (ne peut √™tre d√©sactiv√© que manuellement)
   */
  setPermanent(): void {
    mockState.setPermanent(true);
    mockState.setActive(true);
    mockStorage.saveToStorage();
    console.log('üîí Mode mock d√©fini comme permanent');
  },
  
  /**
   * V√©rifie si le mode mock est permanent
   */
  isPermanent(): boolean {
    return mockState.isPermanent();
  },
  
  /**
   * R√©initialise le mode mock (utile pour les tests)
   */
  reset(): void {
    mockState.setActive(false);
    mockState.setTemporarilyForceReal(false);
    mockState.setPermanent(false);
    mockStorage.clearStorage();
  },

  /**
   * Force une r√©initialisation compl√®te (y compris param√®tres avanc√©s)
   */
  forceReset(): void {
    this.reset();
    mockState.resetConfig();
    console.log('üîÑ R√©initialisation compl√®te du mode mock');
  },

  /**
   * Obtient le sc√©nario de mock actuel
   */
  getScenario(): string {
    return mockState.getConfig().scenario;
  },

  /**
   * D√©finit le sc√©nario de mock
   */
  setScenario(scenario: string): void {
    mockState.updateConfig({ scenario });
    mockStorage.saveToStorage();
    console.log(`‚úÖ Sc√©nario mock d√©fini: ${scenario}`);
  },

  /**
   * Obtient le d√©lai simul√©
   */
  getDelay(): number {
    return mockState.getConfig().delay;
  },

  /**
   * D√©finit le d√©lai simul√©
   */
  setDelay(delay: number): void {
    mockState.updateConfig({ delay });
    mockStorage.saveToStorage();
    console.log(`‚úÖ D√©lai mock d√©fini: ${delay}ms`);
  },

  /**
   * Obtient le taux d'erreur simul√©
   */
  getErrorRate(): number {
    return mockState.getConfig().errorRate;
  },

  /**
   * D√©finit le taux d'erreur simul√©
   */
  setErrorRate(rate: number): void {
    const validRate = Math.max(0, Math.min(100, rate));
    mockState.updateConfig({ errorRate: validRate });
    mockStorage.saveToStorage();
    console.log(`‚úÖ Taux d'erreur mock d√©fini: ${validRate}%`);
  },

  /**
   * Applique un d√©lai simul√© (utile pour tester les √©tats de chargement)
   */
  applySimulatedDelay: mockUtils.applySimulatedDelay,

  /**
   * D√©termine si une erreur doit √™tre simul√©e en fonction du taux d'erreur
   */
  shouldSimulateError: mockUtils.shouldSimulateError,

  /**
   * Exporte les donn√©es de mock au format CSV
   */
  exportMockDataCSV: mockExporter.exportMockDataCSV,
  
  /**
   * T√©l√©charge les donn√©es de mock au format CSV
   */
  downloadMockDataCSV: mockExporter.downloadMockDataCSV
};

// Initialiser √† partir du localStorage si on est dans un environnement navigateur
if (typeof window !== 'undefined') {
  mockStorage.loadFromStorage();
}

export default mockMode;
