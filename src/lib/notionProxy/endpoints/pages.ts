
import { notionApiRequest } from '../proxyFetch';
import { toast } from 'sonner';
import { mockMode } from '../mockMode';

/**
 * R√©cup√®re une page par son ID
 */
export const retrieve = async (pageId: string, token: string) => {
  return notionApiRequest(`/pages/${pageId}`, 'GET', undefined, token);
};

/**
 * Cr√©e une nouvelle page
 */
export const create = async (data: any, token: string) => {
  console.log('üöÄ Cr√©ation de page Notion via proxy:', JSON.stringify(data, null, 2));
  
  // V√©rifier si le token est pr√©sent
  if (!token) {
    console.error('‚ùå Erreur: Token manquant pour la cr√©ation de page Notion');
    toast.error('Token Notion manquant', {
      description: 'Veuillez configurer correctement votre cl√© API Notion.'
    });
    return Promise.reject(new Error('Token Notion manquant'));
  }
  
  // V√©rifier l'√©tat du mode mock
  const isMockMode = mockMode.isActive();
  console.log(`‚ö†Ô∏è √âtat du mode mock lors de la cr√©ation: ${isMockMode ? 'ACTIF' : 'INACTIF'}`);
  
  // D√©sactiver le mode mock pendant la cr√©ation
  if (isMockMode) {
    mockMode.temporarilyForceReal();
    console.log('‚úÖ Mode r√©el temporairement forc√© pour la cr√©ation du projet');
  }
  
  // Format du token : v√©rifier et ajouter "Bearer " si n√©cessaire
  let formattedToken = token;
  if (!token.startsWith('Bearer ')) {
    if (token.startsWith('secret_') || token.startsWith('ntn_')) {
      formattedToken = `Bearer ${token}`;
      console.log('Token format√© avec pr√©fixe Bearer pour API Notion');
    }
  }
  
  // Nettoyer et standardiser les propri√©t√©s pour √©viter les erreurs d'API
  if (data && data.properties) {
    // S'assurer que les propri√©t√©s standard avec noms capitalis√©s sont pr√©sentes
    if (!data.properties.Name && data.properties.name) {
      data.properties.Name = { ...data.properties.name };
      delete data.properties.name; // Supprimer la version non capitalis√©e
    }
    
    if (!data.properties.URL && data.properties.url) {
      data.properties.URL = { ...data.properties.url };
      delete data.properties.url; // Supprimer la version non capitalis√©e
    }
    
    // S'assurer que les propri√©t√©s de titre sont correctement format√©es
    if (data.properties.Name && data.properties.Name.title) {
      if (Array.isArray(data.properties.Name.title)) {
        data.properties.Name.title = data.properties.Name.title.map((item: any) => {
          if (typeof item === 'string') {
            return { text: { content: item } };
          }
          if (typeof item.text === 'string') {
            return { text: { content: item.text } };
          }
          return item;
        });
      } else if (typeof data.properties.Name.title === 'string') {
        // Convertir une cha√Æne simple en format attendu par l'API
        data.properties.Name.title = [{ text: { content: data.properties.Name.title } }];
      }
    }
    
    // Nettoyer les propri√©t√©s en double qui pourraient causer des probl√®mes
    // Conserver uniquement les propri√©t√©s utilis√©es dans la base de donn√©es
    const cleanedProperties: Record<string, any> = {};
    Object.entries(data.properties).forEach(([key, value]) => {
      // Ne pas d√©passer 100 propri√©t√©s (limite de l'API Notion)
      if (Object.keys(cleanedProperties).length < 90) {
        cleanedProperties[key] = value;
      }
    });
    
    data.properties = cleanedProperties;
  }
  
  // Log des donn√©es nettoy√©es
  console.log('üìù Donn√©es nettoy√©es pour cr√©ation de page:', JSON.stringify(data, null, 2));
  
  // Effacer le cache avant cr√©ation
  localStorage.removeItem('projects_cache');
  console.log('üßπ Cache des projets effac√©');
  
  // Appel de l'API Notion
  try {
    console.log('üì° Envoi de la requ√™te √† l\'API Notion avec token:', formattedToken.substring(0, 15) + '...');
    console.log('üì° Endpoint: /pages');
    console.log('üì° M√©thode: POST');
    console.log('üì° Donn√©es: ', JSON.stringify(data, null, 2));
    
    const response = await notionApiRequest('/pages', 'POST', data, formattedToken);
    console.log('‚úÖ R√©ponse de cr√©ation de page:', JSON.stringify(response, null, 2));
    
    // Si la cr√©ation a r√©ussi, nettoyer les caches
    if (response && response.id) {
      console.log('üéâ Cr√©ation r√©ussie! ID de la page:', response.id);
      
      // Effacer le cache des projets pour forcer un rechargement
      localStorage.removeItem('projects_cache');
      localStorage.removeItem('cache_invalidated_at');
      
      // Ajouter un d√©lai de cache pour √©viter de charger avant que Notion n'ait index√©
      localStorage.setItem('cache_invalidated_at', Date.now().toString());
      
      // Notification de succ√®s
      toast.success('Projet cr√©√© avec succ√®s', {
        description: 'Le projet a √©t√© ajout√© √† votre base de donn√©es Notion.'
      });
    }
    
    return response;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de page Notion:', error);
    
    // Tentative de r√©cup√©ration plus d√©taill√©e des informations d'erreur
    let errorDetails = '';
    if (error.response) {
      try {
        errorDetails = JSON.stringify(error.response);
      } catch (e) {
        errorDetails = 'Impossible de s√©rialiser les d√©tails de la r√©ponse';
      }
    }
    console.error('‚ùå D√©tails suppl√©mentaires:', errorDetails);
    
    // Afficher une notification d'erreur avec plus de d√©tails
    let errorMessage = 'Une erreur est survenue lors de la cr√©ation du projet.';
    if (error instanceof Error) {
      errorMessage = error.message;
      
      // Analyse plus d√©taill√©e des erreurs courantes
      if (errorMessage.includes('401')) {
        errorMessage = 'Authentification Notion √©chou√©e. V√©rifiez votre cl√© API.';
        toast.error('Erreur d\'authentification', {
          description: 'Votre cl√© API Notion semble invalide ou expir√©e. Veuillez la v√©rifier et la mettre √† jour.',
          action: {
            label: 'Configurer',
            onClick: () => {
              const configButton = document.querySelector('[id="notion-config-button"]');
              if (configButton) {
                (configButton as HTMLButtonElement).click();
              }
            }
          }
        });
      } else if (errorMessage.includes('400')) {
        errorMessage = 'Format de donn√©es invalide pour Notion.';
        toast.error('Erreur de format', {
          description: 'Le format des donn√©es envoy√©es n\'est pas accept√© par Notion. V√©rifiez les propri√©t√©s requises de votre base de donn√©es.'
        });
      } else if (errorMessage.includes('404')) {
        errorMessage = 'Base de donn√©es Notion introuvable.';
        toast.error('Base introuvable', {
          description: 'L\'ID de la base de donn√©es Notion est incorrect ou cette base n\'existe plus.',
          action: {
            label: 'Configurer',
            onClick: () => {
              const configButton = document.querySelector('[id="notion-config-button"]');
              if (configButton) {
                (configButton as HTMLButtonElement).click();
              }
            }
          }
        });
      } else if (errorMessage.includes('CORS') || errorMessage.includes('network')) {
        errorMessage = 'Probl√®me de connexion au serveur Notion (CORS/r√©seau).';
        toast.error('Erreur r√©seau', {
          description: 'Impossible d\'acc√©der √† l\'API Notion directement. Le proxy serverless sera utilis√©.',
        });
      } else {
        // Erreur g√©n√©rique avec plus de d√©tails
        toast.error('√âchec de cr√©ation du projet', {
          description: `${errorMessage}. V√©rifiez la console pour plus de d√©tails.`
        });
      }
    }
    
    // Activer le mode mock en cas d'erreur persistante
    mockMode.activate();
    console.log('‚ö†Ô∏è Mode mock activ√© suite √† une erreur');
    
    throw error;
  } finally {
    // Restaurer le mode mock si n√©cessaire
    if (isMockMode) {
      mockMode.restoreAfterForceReal();
      console.log('‚ö†Ô∏è √âtat du mode mock restaur√© √† son √©tat initial');
    }
  }
};

/**
 * Met √† jour une page existante
 */
export const update = async (pageId: string, properties: any, token: string) => {
  // V√©rifier que le pageId et le token sont pr√©sents
  if (!pageId) {
    console.error('ID de page manquant pour la mise √† jour');
    return Promise.reject(new Error('ID de page manquant'));
  }
  
  if (!token) {
    console.error('Token manquant pour la mise √† jour de page');
    return Promise.reject(new Error('Token Notion manquant'));
  }
  
  console.log(`Mise √† jour de la page ${pageId}:`, JSON.stringify(properties, null, 2));
  
  try {
    const response = await notionApiRequest(
      `/pages/${pageId}`, 
      'PATCH', 
      properties,
      token
    );
    
    // Si la mise √† jour r√©ussit, invalider le cache
    if (response && response.id) {
      if (typeof localStorage !== 'undefined') {
        // Effacer les caches sp√©cifiques si n√©cessaire
        localStorage.removeItem('projects_cache');
        localStorage.removeItem(`project_${pageId}_cache`);
      }
    }
    
    return response;
  } catch (error) {
    console.error(`Erreur lors de la mise √† jour de la page ${pageId}:`, error);
    throw error;
  }
};
