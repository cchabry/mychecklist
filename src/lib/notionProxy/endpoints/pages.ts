
import { notionApiRequest } from '../proxyFetch';
import { toast } from 'sonner';
import { mockMode } from '../mockMode';

/**
 * R√©cup√®re une page par son ID
 */
export const retrieve = async (pageId: string, token: string) => {
  return notionApiRequest(`/pages/${pageId}`, 'GET', undefined, token);
};

/**
 * Cr√©e une nouvelle page
 */
export const create = async (data: any, token: string) => {
  console.log('üöÄ Cr√©ation de page Notion via proxy:', JSON.stringify(data, null, 2));
  
  // V√©rifier si le token est pr√©sent
  if (!token) {
    console.error('‚ùå Erreur: Token manquant pour la cr√©ation de page Notion');
    toast.error('Token Notion manquant', {
      description: 'Veuillez configurer correctement votre cl√© API Notion.'
    });
    return Promise.reject(new Error('Token Notion manquant'));
  }
  
  // V√©rifier l'√©tat du mode mock de fa√ßon plus approfondie
  const forceRealMode = localStorage.getItem('notion_force_real') === 'true';
  const isMockMode = mockMode.isActive();
  console.log(`‚ö†Ô∏è √âtat du mode mock lors de la cr√©ation:`, {
    'mockMode.isActive()': isMockMode,
    'forceRealMode': forceRealMode,
    'localStorage.notion_mock_mode': localStorage.getItem('notion_mock_mode'),
    'localStorage.notion_force_real': localStorage.getItem('notion_force_real'),
    'temporarilyForcedReal': mockMode.isTemporarilyForcedReal ? mockMode.isTemporarilyForcedReal() : 'non disponible'
  });
  
  // D√©sactiver le mode mock pendant la cr√©ation
  if (isMockMode || forceRealMode) {
    console.log('‚úÖ Mode r√©el temporairement forc√© pour la cr√©ation du projet');
    // D√©sactiver de fa√ßon plus agressive
    localStorage.removeItem('notion_mock_mode');
    localStorage.setItem('notion_force_real', 'true');
    mockMode.temporarilyForceReal();
  }
  
  // V√©rifier √† nouveau si le mode est bien d√©sactiv√©
  if (mockMode.isActive()) {
    console.warn('‚ö†Ô∏è ALERTE: Mode mock toujours actif malgr√© la tentative de d√©sactivation!');
  } else {
    console.log('‚úÖ Confirmation: Mode r√©el activ√© pour la cr√©ation.');
  }
  
  // Format du token : v√©rifier et ajouter "Bearer " si n√©cessaire
  let formattedToken = token;
  if (!token.startsWith('Bearer ')) {
    if (token.startsWith('secret_') || token.startsWith('ntn_')) {
      formattedToken = `Bearer ${token}`;
      console.log('Token format√© avec pr√©fixe Bearer pour API Notion');
    }
  }
  
  // NOUVEAU: V√©rifier d'abord la structure de la base de donn√©es pour adapter le format des donn√©es
  try {
    // Si nous avons un parent database_id, v√©rifions sa structure avant cr√©ation
    if (data?.parent?.database_id) {
      console.log('üîç V√©rification de la structure de la base de donn√©es avant cr√©ation...');
      
      try {
        const dbDetails = await notionApiRequest(
          `/databases/${data.parent.database_id}`, 
          'GET', 
          undefined, 
          formattedToken
        );
        
        // Si on obtient la structure, mettons √† jour nos propri√©t√©s pour qu'elles correspondent
        if (dbDetails && dbDetails.properties) {
          console.log('‚úÖ Structure de la base de donn√©es r√©cup√©r√©e:', 
            Object.keys(dbDetails.properties).map(key => `${key} (${dbDetails.properties[key].type})`)
          );
          
          // Cr√©ons un nouvel objet properties adapt√© √† la base
          const adaptedProperties: Record<string, any> = {};
          
          // Parcourir les propri√©t√©s de la base de donn√©es et adapter nos donn√©es
          Object.entries(dbDetails.properties).forEach(([propName, propDetails]) => {
            const propType = (propDetails as any).type;
            
            // G√©rer la propri√©t√© de titre sp√©ciale (normalement Name)
            if (propType === 'title') {
              console.log(`üîÑ Adaptation de la propri√©t√© titre "${propName}" (${propType})`);
              
              // Si nous avons d√©j√† une propri√©t√© Name, l'utiliser
              if (data.properties.Name && data.properties.Name.title) {
                adaptedProperties[propName] = {
                  title: data.properties.Name.title
                };
              } 
              // Sinon essayer "name", "Titre", "titre", etc.
              else if (data.properties.name && data.properties.name.title) {
                adaptedProperties[propName] = {
                  title: data.properties.name.title
                };
              }
              // Si aucune ne correspond, cr√©er une valeur par d√©faut
              else {
                adaptedProperties[propName] = {
                  title: [{ text: { content: "Nouveau projet" } }]
                };
              }
            }
            // G√©rer les propri√©t√©s select (comme Status)
            else if (propType === 'select') {
              console.log(`üîÑ Adaptation de la propri√©t√© select "${propName}" (${propType})`);
              
              // Si la propri√©t√© s'appelle Status, Statut ou status, essayer de l'adapter
              const isStatusField = propName.toLowerCase() === 'status' || 
                                   propName.toLowerCase() === 'statut';
              
              if (isStatusField) {
                // V√©rifier si nous avons des options valides pour ce select
                if ((propDetails as any).select?.options?.length > 0) {
                  // Utiliser la premi√®re option disponible comme valeur par d√©faut
                  const defaultOption = (propDetails as any).select.options[0].name;
                  adaptedProperties[propName] = {
                    select: { name: defaultOption }
                  };
                  console.log(`‚úÖ Utilisation de la valeur par d√©faut "${defaultOption}" pour ${propName}`);
                } else {
                  console.log(`‚ö†Ô∏è Aucune option trouv√©e pour le select ${propName}, champ ignor√©`);
                }
              }
            }
            // G√©rer les propri√©t√©s rich_text (comme Description)
            else if (propType === 'rich_text') {
              console.log(`üîÑ Adaptation de la propri√©t√© rich_text "${propName}" (${propType})`);
              
              if (propName.toLowerCase().includes('description')) {
                adaptedProperties[propName] = {
                  rich_text: [{ text: { content: "Description du projet" } }]
                };
              }
            }
            // G√©rer les propri√©t√©s URL
            else if (propType === 'url') {
              console.log(`üîÑ Adaptation de la propri√©t√© url "${propName}" (${propType})`);
              
              adaptedProperties[propName] = {
                url: "https://example.com"
              };
            }
            // G√©rer les propri√©t√©s number (comme progress)
            else if (propType === 'number') {
              if (propName.toLowerCase().includes('progress')) {
                adaptedProperties[propName] = {
                  number: 0
                };
              }
            }
            // G√©rer les propri√©t√©s date
            else if (propType === 'date') {
              adaptedProperties[propName] = {
                date: { start: new Date().toISOString() }
              };
            }
            // Ignorer les autres types de propri√©t√©s pour la cr√©ation
          });
          
          console.log('üìù Propri√©t√©s adapt√©es √† la structure de la base:', JSON.stringify(adaptedProperties, null, 2));
          
          // Remplacer les propri√©t√©s d'origine par celles adapt√©es
          data.properties = adaptedProperties;
        }
      } catch (dbError) {
        console.error('‚ùå Erreur lors de la v√©rification de la structure de la base:', dbError);
        // On continue quand m√™me, car l'erreur pourrait venir d'autre chose
        // mais on ajoute un log plus d√©taill√© pour aider au debug
        if (dbError.message?.includes('400')) {
          console.error('‚ùå Erreur 400 - Mauvaise requ√™te. V√©rifiez l\'ID de la base de donn√©es.');
        } else if (dbError.message?.includes('404')) {
          console.error('‚ùå Erreur 404 - Base de donn√©es introuvable. V√©rifiez l\'ID et les permissions.');
        } else if (dbError.message?.includes('403')) {
          console.error('‚ùå Erreur 403 - Acc√®s refus√©. Votre int√©gration n\'a pas acc√®s √† cette base de donn√©es.');
        }
      }
    }
  } catch (structureError) {
    console.error('‚ùå Erreur lors de l\'adaptation des donn√©es √† la structure:', structureError);
    // On continue avec les donn√©es d'origine
  }
  
  // Log des donn√©es nettoy√©es et adapt√©es √† la base
  console.log('üìù Donn√©es finales pour cr√©ation de page:', JSON.stringify(data, null, 2));
  
  // Effacer le cache avant cr√©ation
  localStorage.removeItem('projects_cache');
  console.log('üßπ Cache des projets effac√©');
  
  // Appel de l'API Notion
  try {
    console.log('üì° Envoi de la requ√™te √† l\'API Notion avec token:', formattedToken.substring(0, 15) + '...');
    console.log('üì° Endpoint: /pages');
    console.log('üì° M√©thode: POST');
    console.log('üì° Donn√©es: ', JSON.stringify(data, null, 2));
    
    const response = await notionApiRequest('/pages', 'POST', data, formattedToken);
    console.log('‚úÖ R√©ponse de cr√©ation de page:', JSON.stringify(response, null, 2));
    
    // Si la cr√©ation a r√©ussi, nettoyer les caches
    if (response && response.id) {
      console.log('üéâ Cr√©ation r√©ussie! ID de la page:', response.id);
      
      // Effacer le cache des projets pour forcer un rechargement
      localStorage.removeItem('projects_cache');
      localStorage.removeItem('cache_invalidated_at');
      
      // Ajouter un d√©lai de cache pour √©viter de charger avant que Notion n'ait index√©
      localStorage.setItem('cache_invalidated_at', Date.now().toString());
      
      // Notification de succ√®s
      toast.success('Projet cr√©√© avec succ√®s', {
        description: 'Le projet a √©t√© ajout√© √† votre base de donn√©es Notion.'
      });
    }
    
    return response;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de page Notion:', error);
    
    // Tentative de r√©cup√©ration plus d√©taill√©e des informations d'erreur
    let errorDetails = '';
    if (error.response) {
      try {
        errorDetails = JSON.stringify(error.response);
      } catch (e) {
        errorDetails = 'Impossible de s√©rialiser les d√©tails de la r√©ponse';
      }
    }
    console.error('‚ùå D√©tails suppl√©mentaires:', errorDetails);
    
    // Afficher une notification d'erreur avec plus de d√©tails
    let errorMessage = 'Une erreur est survenue lors de la cr√©ation du projet.';
    if (error instanceof Error) {
      errorMessage = error.message;
      
      // Analyse plus d√©taill√©e des erreurs courantes
      if (errorMessage.includes('401')) {
        errorMessage = 'Authentification Notion √©chou√©e. V√©rifiez votre cl√© API.';
        toast.error('Erreur d\'authentification', {
          description: 'Votre cl√© API Notion semble invalide ou expir√©e. Veuillez la v√©rifier et la mettre √† jour.',
          action: {
            label: 'Configurer',
            onClick: () => {
              const configButton = document.querySelector('[id="notion-config-button"]');
              if (configButton) {
                (configButton as HTMLButtonElement).click();
              }
            }
          }
        });
      } else if (errorMessage.includes('400')) {
        errorMessage = 'Format de donn√©es invalide pour Notion.';
        toast.error('Erreur de format', {
          description: 'Le format des donn√©es envoy√©es n\'est pas accept√© par Notion. V√©rifiez les propri√©t√©s requises de votre base de donn√©es.',
          action: {
            label: 'V√©rifier structure',
            onClick: () => {
              // Sauvegarder l'erreur dans localStorage pour pouvoir l'analyser
              localStorage.setItem('notion_last_error', JSON.stringify(error.message || 'Erreur 400'));
              toast.info('Conseil', {
                description: 'V√©rifiez que votre base Notion contient les propri√©t√©s correctes et que leurs types correspondent.'
              });
            }
          }
        });
      } else if (errorMessage.includes('404')) {
        errorMessage = 'Base de donn√©es Notion introuvable.';
        toast.error('Base introuvable', {
          description: 'L\'ID de la base de donn√©es Notion est incorrect ou cette base n\'existe plus.',
          action: {
            label: 'Configurer',
            onClick: () => {
              const configButton = document.querySelector('[id="notion-config-button"]');
              if (configButton) {
                (configButton as HTMLButtonElement).click();
              }
            }
          }
        });
      } else if (errorMessage.includes('CORS') || errorMessage.includes('network')) {
        errorMessage = 'Probl√®me de connexion au serveur Notion (CORS/r√©seau).';
        toast.error('Erreur r√©seau', {
          description: 'Impossible d\'acc√©der √† l\'API Notion directement. Le proxy serverless sera utilis√©.',
        });
      } else {
        // Erreur g√©n√©rique avec plus de d√©tails
        toast.error('√âchec de cr√©ation du projet', {
          description: `${errorMessage}. V√©rifiez la console pour plus de d√©tails.`
        });
      }
    }
    
    // Activer le mode mock en cas d'erreur persistante
    mockMode.activate();
    console.log('‚ö†Ô∏è Mode mock activ√© suite √† une erreur');
    
    throw error;
  } finally {
    // Restaurer le mode mock si n√©cessaire
    if (isMockMode) {
      mockMode.restoreAfterForceReal();
      console.log('‚ö†Ô∏è √âtat du mode mock restaur√© √† son √©tat initial');
    }
  }
};

/**
 * Met √† jour une page existante
 */
export const update = async (pageId: string, properties: any, token: string) => {
  // V√©rifier que le pageId et le token sont pr√©sents
  if (!pageId) {
    console.error('ID de page manquant pour la mise √† jour');
    return Promise.reject(new Error('ID de page manquant'));
  }
  
  if (!token) {
    console.error('Token manquant pour la mise √† jour de page');
    return Promise.reject(new Error('Token Notion manquant'));
  }
  
  console.log(`Mise √† jour de la page ${pageId}:`, JSON.stringify(properties, null, 2));
  
  // D√©sactiver temporairement le mode mock pour cette op√©ration
  const isMockMode = mockMode.isActive();
  if (isMockMode) {
    console.log('‚úÖ Mode r√©el temporairement forc√© pour la mise √† jour de page');
    mockMode.temporarilyForceReal();
  }
  
  try {
    const response = await notionApiRequest(
      `/pages/${pageId}`, 
      'PATCH', 
      properties,
      token
    );
    
    // Si la mise √† jour r√©ussit, invalider le cache
    if (response && response.id) {
      if (typeof localStorage !== 'undefined') {
        // Effacer les caches sp√©cifiques si n√©cessaire
        localStorage.removeItem('projects_cache');
        localStorage.removeItem(`project_${pageId}_cache`);
      }
    }
    
    return response;
  } catch (error) {
    console.error(`Erreur lors de la mise √† jour de la page ${pageId}:`, error);
    throw error;
  } finally {
    // Restaurer le mode mock si n√©cessaire
    if (isMockMode) {
      mockMode.restoreAfterForceReal();
    }
  }
};
