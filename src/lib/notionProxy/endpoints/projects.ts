import { notionApiRequest } from '../proxyFetch';
import { operationMode } from '@/services/operationMode';
import { MOCK_PROJECTS } from '@/lib/mockData';
import { cleanProjectId } from '../../utils';

/**
 * R√©cup√®re tous les projets
 */
export const getProjects = async () => {
  // Si nous sommes en mode mock, retourner les donn√©es mock
  if (operationMode.isDemoMode) {
    console.log('Using mock projects data');
    return MOCK_PROJECTS;
  }

  // Sinon, r√©cup√©rer depuis Notion
  const apiKey = localStorage.getItem('notion_api_key');
  const dbId = localStorage.getItem('notion_database_id');
  if (!apiKey || !dbId) {
    throw new Error('Configuration Notion manquante');
  }

  const response = await notionApiRequest(`/databases/${dbId}/query`, 'POST', {}, apiKey);

  // Mapper les r√©sultats en projets
  return response.results.map((page) => {
    const properties = page.properties;
    return {
      id: page.id,
      name: properties.Name?.title?.[0]?.plain_text || properties.name?.title?.[0]?.plain_text || 'Sans titre',
      url: properties.URL?.url || properties.url?.url || properties.Url?.url || '',
      description: properties.Description?.rich_text?.[0]?.plain_text || properties.description?.rich_text?.[0]?.plain_text || '',
      status: properties.Status?.select?.name || properties.status?.select?.name || 'Non d√©marr√©',
      createdAt: page.created_time,
      updatedAt: page.last_edited_time,
      progress: properties.Progress?.number || properties.progress?.number || 0,
      itemsCount: properties.ItemsCount?.number || properties.itemsCount?.number || properties.Nombre?.number || 15,
      pagesCount: properties.PagesCount?.number || properties.pagesCount?.number || 0
    };
  });
};

/**
 * R√©cup√®re un projet par son ID de mani√®re fiable
 * Impl√©mentation am√©lior√©e pour √©viter les bascules inappropri√©es en mode d√©mo
 */
export const getProject = async (id) => {
  // Nettoyer l'ID pour assurer la coh√©rence
  const cleanedId = cleanProjectId(id);
  console.log(`üîç getProject - ID original: "${id}", ID nettoy√©: "${cleanedId}"`);
  
  if (!cleanedId) {
    console.error("‚ùå getProject - ID invalide apr√®s nettoyage");
    return null;
  }

  // IMPORTANT: M√©moriser le mode actuel au d√©but de la fonction
  // pour √©viter une bascule en mode d√©mo au milieu de l'ex√©cution
  const startInDemoMode = operationMode.isDemoMode;
  console.log(`üîç getProject - Mode au d√©marrage: ${startInDemoMode ? 'D√âMO' : 'R√âEL'}`);

  // V√©rifier si nous avons un ID de projet r√©cemment cr√©√©
  // Cette v√©rification aide √† maintenir la coh√©rence pendant la navigation post-cr√©ation
  const recentlyCreatedId = localStorage.getItem('recently_created_project_id');
  if (recentlyCreatedId && cleanedId === cleanProjectId(recentlyCreatedId)) {
    console.log(`üîç getProject - Projet r√©cemment cr√©√© d√©tect√©: "${cleanedId}"`);
    // D√©marrer en mode r√©el si possible pour les projets r√©cemment cr√©√©s
    if (startInDemoMode) {
      console.log(`üîç getProject - D√©sactivation temporaire du mode d√©mo pour projet r√©cent`);
      operationMode.temporarilyForceReal();
    }
  }

  // Si nous sommes en mode mock, retourner les donn√©es mock
  if (operationMode.isDemoMode) {
    console.log(`üîç getProject - Recherche du projet mock ID: "${cleanedId}"`);
    
    // Rechercher le projet dans les donn√©es mock
    // Important: Comparer sans les tirets car ils sont parfois inclus dans l'ID
    const mockProject = MOCK_PROJECTS.find((project) => {
      // Normaliser les deux IDs pour la comparaison
      const normalizedProjectId = cleanProjectId(project.id);
      const normalizedRequestId = cleanedId;
      
      console.log(`Comparaison: [${normalizedProjectId}] avec [${normalizedRequestId}]`);
      return normalizedProjectId === normalizedRequestId;
    });
    
    if (mockProject) {
      console.log(`‚úÖ getProject - Projet mock trouv√©: "${mockProject.name}"`);
    } else {
      // Si nous ne trouvons pas le projet en mode d√©mo et qu'il s'agit d'un projet r√©cemment cr√©√©,
      // cr√©ons un mock projet correspondant pour am√©liorer l'exp√©rience utilisateur
      if (recentlyCreatedId && cleanedId === cleanProjectId(recentlyCreatedId)) {
        const cachedProjectData = localStorage.getItem(`project_data_${cleanedId}`);
        if (cachedProjectData) {
          try {
            const projectData = JSON.parse(cachedProjectData);
            console.log(`üîÑ getProject - Cr√©ation d'un mock projet pour ID r√©cent: "${cleanedId}"`);
            const newMockProject = {
              id: cleanedId,
              name: projectData.name || 'Projet r√©cemment cr√©√©',
              url: projectData.url || '',
              description: 'Projet cr√©√© puis visualis√© en mode d√©monstration',
              status: 'Non d√©marr√©',
              createdAt: projectData.createdAt || new Date().toISOString(),
              updatedAt: projectData.updatedAt || new Date().toISOString(),
              progress: 0,
              itemsCount: 15,
              pagesCount: 0
            };
            
            // Ajouter temporairement aux projets mock
            MOCK_PROJECTS.unshift(newMockProject);
            return newMockProject;
          } catch (e) {
            console.error(`‚ùå getProject - Erreur lors de la cr√©ation du mock projet: ${e.message}`);
          }
        }
      }
      
      // Logs d√©taill√©s pour d√©boguer pourquoi le projet n'est pas trouv√©
      console.error(`‚ùå getProject - Projet mock non trouv√© pour ID: "${cleanedId}"`);
      console.log("Projets disponibles:", MOCK_PROJECTS.map(p => ({id: p.id, name: p.name})));
    }
    
    return mockProject || null;
  }

  // Sinon, r√©cup√©rer depuis Notion
  try {
    const apiKey = localStorage.getItem('notion_api_key');
    if (!apiKey) {
      console.error("‚ùå getProject - Cl√© API Notion manquante");
      throw new Error('Cl√© API Notion manquante');
    }

    console.log(`üîç getProject - Appel API Notion pour page ID: "${cleanedId}"`);
    
    // Essayons d'abord de trouver le projet dans le cache
    const cachedProjects = localStorage.getItem('projects_cache');
    if (cachedProjects) {
      try {
        const { projects } = JSON.parse(cachedProjects);
        
        // Utiliser cleanProjectId pour normaliser la comparaison
        const projectInCache = projects.find(p => cleanProjectId(p.id) === cleanedId);
        
        if (projectInCache) {
          console.log(`‚úÖ getProject - Projet trouv√© dans le cache: "${projectInCache.name}"`);
          
          // Sauvegarder les donn√©es du projet pour r√©f√©rence future si n√©cessaire
          localStorage.setItem(`project_data_${cleanedId}`, JSON.stringify(projectInCache));
          
          return projectInCache;
        }
      } catch (e) {
        console.error('Erreur lors de la lecture du cache des projets:', e);
      }
    }
    
    // Si pas dans le cache, faire une requ√™te API
    const response = await notionApiRequest(`/pages/${cleanedId}`, 'GET', undefined, apiKey);
    
    if (!response) {
      console.error(`‚ùå getProject - R√©ponse vide de l'API Notion pour ID: "${cleanedId}"`);
      return null;
    }

    const properties = response.properties;
    console.log(`‚úÖ getProject - Projet Notion r√©cup√©r√©: "${properties.Name?.title?.[0]?.plain_text || 'Sans titre'}"`);
    
    const project = {
      id: response.id,
      name: properties.Name?.title?.[0]?.plain_text || properties.name?.title?.[0]?.plain_text || 'Sans titre',
      url: properties.URL?.url || properties.url?.url || properties.Url?.url || '',
      description: properties.Description?.rich_text?.[0]?.plain_text || properties.description?.rich_text?.[0]?.plain_text || '',
      status: properties.Status?.select?.name || properties.status?.select?.name || 'Non d√©marr√©',
      createdAt: response.created_time,
      updatedAt: response.last_edited_time,
      progress: properties.Progress?.number || properties.progress?.number || 0,
      itemsCount: properties.ItemsCount?.number || properties.itemsCount?.number || properties.Nombre?.number || 15,
      pagesCount: properties.PagesCount?.number || properties.pagesCount?.number || 0
    };
    
    // Sauvegarder les donn√©es du projet pour r√©f√©rence future
    localStorage.setItem(`project_data_${cleanedId}`, JSON.stringify(project));
    
    return project;
  } catch (error) {
    console.error(`‚ùå getProject - Erreur lors de la r√©cup√©ration du projet ID: "${cleanedId}"`, error);
    
    // Activer le mode d√©mo en cas d'erreur d'acc√®s √† l'API
    if (error.message?.includes('Failed to fetch') || error.message?.includes('401')) {
      console.log('üîÑ getProject - Activation du mode d√©mo suite √† une erreur API');
      operationMode.enableDemoMode('Erreur API Notion');
      
      // Retenter avec les donn√©es mock
      return getProject(cleanedId);
    }
    
    return null;
  }
};

/**
 * Cr√©e un nouveau projet
 */
export const createProject = async (data) => {
  // Si nous sommes en mode mock, cr√©er un faux projet
  if (operationMode.isDemoMode) {
    console.log('Creating mock project with name:', data.name);
    const newProject = {
      id: `project-${Date.now()}`,
      name: data.name,
      url: data.url,
      description: 'Projet cr√©√© en mode d√©monstration',
      status: 'Non d√©marr√©',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      progress: 0,
      itemsCount: 15,
      pagesCount: 0
    };
    
    // Ajouter aux projets mock pour coh√©rence
    MOCK_PROJECTS.unshift(newProject);
    
    return newProject;
  }

  // Sinon, cr√©er dans Notion
  const apiKey = localStorage.getItem('notion_api_key');
  const dbId = localStorage.getItem('notion_database_id');
  
  if (!apiKey || !dbId) {
    throw new Error('Configuration Notion manquante');
  }

  const properties = {
    "Name": {
      title: [
        {
          text: {
            content: data.name
          }
        }
      ]
    },
    "URL": {
      url: data.url
    },
    "Description": {
      rich_text: [
        {
          text: {
            content: 'Projet cr√©√© via l\'application'
          }
        }
      ]
    },
    "Status": {
      select: {
        name: 'Non d√©marr√©'
      }
    },
    "Progress": {
      number: 0
    },
    "ItemsCount": {
      number: 15
    },
    "PagesCount": {
      number: 0
    }
  };

  const response = await notionApiRequest(`/pages`, 'POST', {
    parent: {
      database_id: dbId
    },
    properties
  }, apiKey);

  return {
    id: response.id,
    name: data.name,
    url: data.url,
    description: 'Projet cr√©√© via l\'application',
    status: 'Non d√©marr√©',
    createdAt: response.created_time,
    updatedAt: response.last_edited_time,
    progress: 0,
    itemsCount: 15,
    pagesCount: 0
  };
};

/**
 * Met √† jour un projet existant
 */
export const updateProject = async (id, data) => {
  // Si nous sommes en mode mock, mettre √† jour un faux projet
  if (operationMode.isDemoMode) {
    console.log('Updating mock project with ID:', id);
    const projectIndex = MOCK_PROJECTS.findIndex((project) => project.id === id);
    
    if (projectIndex !== -1) {
      MOCK_PROJECTS[projectIndex] = {
        ...MOCK_PROJECTS[projectIndex],
        name: data.name,
        url: data.url,
        updatedAt: new Date().toISOString()
      };
      
      return MOCK_PROJECTS[projectIndex];
    }
    
    return null;
  }

  // Sinon, mettre √† jour dans Notion
  const apiKey = localStorage.getItem('notion_api_key');
  if (!apiKey) {
    throw new Error('Cl√© API Notion manquante');
  }

  const properties = {
    "Name": {
      title: [
        {
          text: {
            content: data.name
          }
        }
      ]
    },
    "URL": {
      url: data.url
    }
  };

  await notionApiRequest(`/pages/${id}`, 'PATCH', {
    properties
  }, apiKey);

  // R√©cup√©rer le projet mis √† jour
  return getProject(id);
};

/**
 * Supprime un projet
 */
export const deleteProject = async (id) => {
  // Si nous sommes en mode mock, simuler une suppression
  if (operationMode.isDemoMode) {
    console.log('Deleting mock project with ID:', id);
    const projectIndex = MOCK_PROJECTS.findIndex((project) => project.id === id);
    
    if (projectIndex !== -1) {
      MOCK_PROJECTS.splice(projectIndex, 1);
      return true;
    }
    
    return false;
  }

  // Sinon, supprimer dans Notion (Notion archive les pages, ne les supprime pas vraiment)
  const apiKey = localStorage.getItem('notion_api_key');
  if (!apiKey) {
    throw new Error('Cl√© API Notion manquante');
  }

  try {
    await notionApiRequest(`/pages/${id}`, 'PATCH', {
      archived: true
    }, apiKey);
    
    return true;
  } catch (error) {
    console.error(`Erreur lors de la suppression du projet #${id}:`, error);
    return false;
  }
};
