
import { toast } from 'sonner';
import { 
  NOTION_API_BASE, 
  VERCEL_PROXY_URL, 
  NOTION_API_VERSION, 
  REQUEST_TIMEOUT_MS,
  MAX_RETRY_ATTEMPTS,
  STORAGE_KEYS
} from './config';

/**
 * Fonction principale pour effectuer des requ√™tes √† l'API Notion (directement ou via proxy)
 */
export const notionApiRequest = async (
  endpoint: string, 
  options: RequestInit = {},
  apiKey?: string
): Promise<any> => {
  // R√©cup√©rer la cl√© API depuis les param√®tres ou localStorage
  const token = apiKey || localStorage.getItem(STORAGE_KEYS.API_KEY);
  
  if (!token) {
    throw new Error('Cl√© API Notion introuvable');
  }
  
  // Pr√©parer les en-t√™tes avec l'autorisation
  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
    'Notion-Version': NOTION_API_VERSION,
    ...options.headers
  };

  try {
    // Ajouter un timeout √† la requ√™te
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT_MS);
    
    let response;
    let result;
    
    // Essayer d'utiliser le proxy Vercel d'abord
    try {
      console.log(`üîÑ Tentative de connexion via proxy Vercel pour: ${endpoint}`);
      console.log(`üìç URL du proxy utilis√©e: ${VERCEL_PROXY_URL}`);
      
      // Pr√©parer les donn√©es pour le proxy
      const proxyData = {
        endpoint,
        method: options.method || 'GET',
        token,
        body: options.body ? JSON.parse(options.body as string) : undefined
      };
      
      console.log('üì¶ Donn√©es envoy√©es au proxy:', {
        endpoint: proxyData.endpoint,
        method: proxyData.method,
        hasToken: !!proxyData.token,
        hasBody: !!proxyData.body
      });
      
      // Ajouter une logique de retry pour le proxy (3 tentatives)
      let retryCount = 0;
      let proxySuccess = false;
      
      while (retryCount < MAX_RETRY_ATTEMPTS && !proxySuccess) {
        try {
          if (retryCount > 0) {
            console.log(`üîÑ Tentative ${retryCount + 1} d'appel au proxy Vercel...`);
          }
          
          // Appeler le proxy Vercel avec les options avanc√©es
          response = await fetch(VERCEL_PROXY_URL, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(proxyData),
            signal: controller.signal,
            // D√©sactiver la mise en cache pour les requ√™tes au proxy
            cache: 'no-store',
            // N√©cessaire pour les requ√™tes cross-origin
            mode: 'cors',
            credentials: 'omit'
          });
          
          console.log(`üì• R√©ponse du proxy re√ßue: ${response.status} ${response.statusText}`);
          
          // Obtenir le texte brut de la r√©ponse
          const responseText = await response.text();
          console.log(`üìÑ Longueur de la r√©ponse: ${responseText.length} caract√®res`);
          
          // Tenter de parser la r√©ponse JSON
          try {
            result = JSON.parse(responseText);
            console.log('‚úÖ R√©ponse JSON pars√©e avec succ√®s');
          } catch (parseError) {
            console.error('‚ùå Erreur lors du parsing de la r√©ponse:', parseError);
            result = { text: responseText, parseError: true };
          }
          
          // V√©rifier si la r√©ponse est OK
          if (response.ok) {
            console.log('‚úÖ Requ√™te au proxy r√©ussie');
            proxySuccess = true;
            break;
          } else {
            console.warn(`‚ùå √âchec de la r√©ponse du proxy (${response.status}): ${response.statusText}`);
            console.warn('D√©tails de l\'erreur:', result);
          }
        } catch (retryError) {
          console.warn(`‚ùå Erreur lors de la tentative ${retryCount + 1}:`, retryError);
        }
        
        retryCount++;
        // Attendre un peu avant de r√©essayer (backoff exponentiel)
        if (retryCount < MAX_RETRY_ATTEMPTS) {
          const delayMs = 1000 * Math.pow(2, retryCount - 1);
          console.log(`‚è±Ô∏è Attente de ${delayMs}ms avant la prochaine tentative...`);
          await new Promise(resolve => setTimeout(resolve, delayMs));
        }
      }
      
      // Si le proxy a r√©pondu avec succ√®s
      if (proxySuccess) {
        clearTimeout(timeoutId);
        return result;
      } else {
        // Tous les essais ont √©chou√©
        console.error('‚ùå Toutes les tentatives d\'utilisation du proxy ont √©chou√©');
        
        // V√©rifier si les r√©ponses contiennent des erreurs sp√©cifiques
        if (result && (result.error || result.message)) {
          throw new Error(`Erreur du proxy: ${result.error || result.message}`);
        } else {
          throw new Error('√âchec de la communication avec le proxy Notion');
        }
      }
    } catch (proxyError) {
      console.warn('‚ùå √âchec de l\'utilisation du proxy:', proxyError);
      
      // Si c'est une erreur r√©seau g√©n√©rique, proposer un message plus informatif
      if (proxyError.message?.includes('Failed to fetch')) {
        console.error('‚ùå Erreur r√©seau d√©tect√©e (Failed to fetch)');
        
        // Tenter de ping le proxy pour v√©rifier s'il est accessible
        try {
          const pingResponse = await fetch(`${VERCEL_PROXY_URL}/ping`, { 
            method: 'GET',
            mode: 'no-cors',
            cache: 'no-store'
          });
          console.log('üì° Ping du proxy Vercel:', pingResponse.status);
        } catch (pingError) {
          console.error('üì° √âchec du ping vers le proxy:', pingError);
        }
        
        toast.error('Erreur de connexion au proxy', {
          description: 'Impossible de se connecter au proxy Notion. V√©rifiez que le proxy est d√©ploy√© et accessible.',
        });
        throw new Error('Failed to fetch - √âchec de connexion au proxy Notion');
      }
      
      // Continuer avec l'appel direct si le proxy a √©chou√© (qui √©chouera probablement avec CORS)
      console.warn('‚ö†Ô∏è Tentative d\'appel direct √† l\'API Notion (susceptible d\'√©chouer avec CORS)');
    }
    
    // Appel direct √† l'API Notion (qui √©chouera probablement avec CORS dans le navigateur)
    console.log(`üîÑ Tentative d'appel direct √† l'API Notion: ${NOTION_API_BASE}${endpoint}`);
    
    response = await fetch(`${NOTION_API_BASE}${endpoint}`, {
      ...options,
      headers,
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    // V√©rifier si la r√©ponse est OK
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: 'Erreur inconnue' }));
      console.error('‚ùå Erreur API Notion:', errorData);
      
      // G√©rer les codes d'erreur courants
      if (response.status === 401) {
        throw new Error('Erreur d\'authentification Notion: Cl√© API invalide ou expir√©e');
      }
      
      if (response.status === 404) {
        throw new Error('Ressource Notion introuvable: V√©rifiez l\'ID de la base de donn√©es');
      }
      
      if (response.status === 429) {
        throw new Error('Trop de requ√™tes Notion: Veuillez r√©essayer plus tard');
      }
      
      throw new Error(`Erreur Notion: ${errorData.message || response.statusText || 'Erreur inconnue'}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('‚ùå √âchec de la requ√™te Notion:', error);
    
    // G√©rer les erreurs sp√©cifiques
    if (error.name === 'AbortError') {
      toast.error('Requ√™te Notion expir√©e', {
        description: 'La connexion √† Notion a pris trop de temps. V√©rifiez votre connexion internet.',
      });
      throw new Error('D√©lai d\'attente de la requ√™te Notion d√©pass√©');
    }
    
    if (error.message?.includes('Failed to fetch')) {
      const corsError = new Error('Failed to fetch');
      corsError.message = 'Failed to fetch - Limitation CORS';
      throw corsError;
    }
    
    throw error;
  }
};
