
import { operationMode } from '@/services/operationMode';
import { operationModeUtils } from '@/services/operationMode/utils';
import { corsProxy } from '@/services/corsProxy';
import { 
  getDeploymentType, 
  isNetlifyDeployment, 
  isLovablePreview,
  isDeploymentDebuggingEnabled,
  PROXY_CONFIG,
  getServerlessProxyUrl,
  STORAGE_KEYS
} from './config';

/**
 * Fonction utilitaire pour effectuer des requ√™tes √† l'API Notion via un proxy
 * Strat√©gie optimis√©e pour minimiser les erreurs CORS
 */
export const notionApiRequest = async (
  endpoint: string,
  method: string = 'GET',
  body?: any,
  token?: string
): Promise<any> {
  // Log de d√©bogage pour le type de d√©ploiement
  const deploymentType = getDeploymentType();
  if (isDeploymentDebuggingEnabled()) {
    console.log(`üåç Type de d√©ploiement d√©tect√©: ${deploymentType}`);
    console.log(`üîß Requ√™te Notion (${method}): ${endpoint}`);
  }

  // Normaliser l'endpoint pour garantir le format correct
  const normalizedEndpoint = normalizeEndpoint(endpoint);
  
  // V√©rifier si nous sommes en mode d√©mo simul√©
  if (operationMode.isDemoMode) {
    // Simuler un d√©lai r√©seau
    await operationModeUtils.applySimulatedDelay();
    
    // Simuler une erreur al√©atoire selon le taux configur√©
    if (operationModeUtils.shouldSimulateError()) {
      throw new Error(`Erreur simul√©e lors de l'appel √† ${normalizedEndpoint}`);
    }
    
    // En mode d√©mo, on devrait normalement utiliser les donn√©es mock au lieu d'appeler cette fonction
    console.warn(`notionApiRequest appel√© en mode d√©mo pour ${normalizedEndpoint}. Utiliser les donn√©es mock directement.`);
    
    // Retourner un r√©sultat fictif g√©n√©rique
    return { success: true, message: "Op√©ration simul√©e avec succ√®s" };
  }
  
  // R√©cup√©rer le token d'authentification si non fourni
  const authToken = token || localStorage.getItem(STORAGE_KEYS.API_KEY);
  
  if (!authToken) {
    throw new Error('Token Notion manquant');
  }
  
  // Formater correctement le token pour l'API Notion
  let formattedToken = authToken;
  if (!formattedToken.startsWith('Bearer ')) {
    if (formattedToken.startsWith('secret_') || formattedToken.startsWith('ntn_')) {
      formattedToken = `Bearer ${formattedToken}`;
    }
  }
  
  // Mettre en place un timeout pour toutes les requ√™tes
  const timeoutPromise = new Promise<never>((_, reject) => {
    setTimeout(() => reject(new Error('Timeout de la requ√™te Notion')), PROXY_CONFIG.REQUEST_TIMEOUT);
  });

  try {
    // Strat√©gie 1: Utiliser d'abord la fonction serverless Netlify
    if (isNetlifyDeployment()) {
      try {
        const result = await Promise.race([
          useNetlifyProxy(normalizedEndpoint, method, body, formattedToken),
          timeoutPromise
        ]);
        
        // Si √ßa fonctionne, signaler une op√©ration r√©ussie
        operationMode.handleSuccessfulOperation();
        return result;
      } catch (netlifyError) {
        console.warn('‚ö†Ô∏è √âchec de la fonction Netlify:', netlifyError.message);
        // Passer √† la strat√©gie suivante en cas d'√©chec
      }
    }
    
    // Strat√©gie 2: Essayer le proxy CORS depuis le client
    try {
      const result = await Promise.race([
        useCorsProxy(normalizedEndpoint, method, body, formattedToken),
        timeoutPromise
      ]);
      
      // Si √ßa fonctionne, signaler une op√©ration r√©ussie
      operationMode.handleSuccessfulOperation();
      return result;
    } catch (corsError) {
      console.warn('‚ö†Ô∏è √âchec du proxy CORS:', corsError.message);
      
      // Tenter d'autres proxies CORS en cas d'√©chec
      const newProxyFound = await corsProxy.findWorkingProxy(formattedToken);
      
      if (newProxyFound) {
        try {
          const result = await Promise.race([
            useCorsProxy(normalizedEndpoint, method, body, formattedToken),
            timeoutPromise
          ]);
          
          operationMode.handleSuccessfulOperation();
          return result;
        } catch (retryError) {
          console.error('‚ùå √âchec apr√®s tentative avec nouveau proxy:', retryError.message);
        }
      }
      
      // Si tout √©choue, basculer en mode d√©mo automatiquement
      operationMode.enableDemoMode('√âchec de connexion √† Notion');
      
      // Retourner un r√©sultat factice comme fallback ultime
      return { 
        success: false, 
        error: "Connexion √† Notion √©chou√©e, mode d√©monstration activ√©",
        fallback: true
      };
    }
  } catch (error) {
    // En cas d'erreur, signaler au syst√®me operationMode
    operationMode.handleConnectionError(
      error instanceof Error ? error : new Error(String(error)),
      `notionApiRequest: ${normalizedEndpoint}`
    );
    
    // Propager l'erreur
    throw error;
  }
};

/**
 * Normalise les endpoints pour garantir la coh√©rence
 */
function normalizeEndpoint(endpoint: string): string {
  // Enlever les barres obliques de d√©but et de fin pour la normalisation
  let cleanedEndpoint = endpoint.trim();
  
  // G√©rer le cas sp√©cial o√π l'endpoint est d√©j√† complet avec /v1
  if (cleanedEndpoint.startsWith('/v1/')) {
    return cleanedEndpoint; // D√©j√† au bon format
  }
  
  // S'assurer que l'endpoint commence par une barre oblique
  if (!cleanedEndpoint.startsWith('/')) {
    cleanedEndpoint = '/' + cleanedEndpoint;
  }
  
  // Ajouter le pr√©fixe /v1 si n√©cessaire
  return `/v1${cleanedEndpoint}`;
}

/**
 * Utilise les fonctions Netlify pour appeler l'API Notion
 */
async function useNetlifyProxy(
  endpoint: string,
  method: string = 'GET',
  body?: any,
  token?: string
): Promise<any> {
  // Pour les fonctions serverless, on doit retirer le pr√©fixe /v1
  const serverlessEndpoint = endpoint.startsWith('/v1/')
    ? endpoint.substring(3) // Enlever le /v1 car il sera ajout√© par le proxy
    : endpoint;

  // URL de la fonction Netlify
  const netlifyProxyUrl = '/.netlify/functions/notion-proxy';
  
  // Faire une requ√™te POST √† la fonction serverless
  const response = await fetch(netlifyProxyUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      endpoint: serverlessEndpoint,
      method,
      body,
      token
    })
  });
  
  if (!response.ok) {
    let errorMessage = `Erreur du proxy Netlify: ${response.status}`;
    
    try {
      const errorData = await response.json();
      errorMessage += ` ${JSON.stringify(errorData)}`;
    } catch (e) {
      // Si on ne peut pas parser le JSON, utiliser le texte brut
      const errorText = await response.text();
      errorMessage += ` ${errorText}`;
    }
    
    throw new Error(errorMessage);
  }
  
  return response.json();
}

/**
 * Utilise un proxy CORS c√¥t√© client pour appeler l'API Notion
 */
async function useCorsProxy(
  endpoint: string,
  method: string = 'GET',
  body?: any,
  token?: string
): Promise<any> {
  // Pour le proxy CORS, on maintient le format complet avec /v1
  const corsEndpoint = endpoint.startsWith('/v1/') 
    ? endpoint 
    : `/v1${endpoint.startsWith('/') ? endpoint : '/' + endpoint}`;
    
  // Construire l'URL compl√®te vers l'API Notion
  const baseUrl = PROXY_CONFIG.NOTION_API_BASE;
  const url = `${baseUrl}${corsEndpoint}`;
  
  // Obtenir le proxy CORS
  const currentProxy = corsProxy.getCurrentProxy();
  if (!currentProxy) {
    throw new Error('Aucun proxy CORS disponible. Activez le mode d√©mo ou configurez un proxy.');
  }
  
  // Construire l'URL du proxy
  const proxiedUrl = corsProxy.proxify(url);
  
  // Configurer les options de la requ√™te
  const options: RequestInit = {
    method,
    headers: {
      'Authorization': token || '',
      'Content-Type': 'application/json',
      'Notion-Version': PROXY_CONFIG.NOTION_API_VERSION
    }
  };
  
  // Ajouter le corps de la requ√™te si n√©cessaire
  if (body && (method !== 'GET' && method !== 'HEAD')) {
    options.body = JSON.stringify(body);
  }
  
  // Effectuer la requ√™te HTTP
  const response = await fetch(proxiedUrl, options);
  
  // V√©rifier si la r√©ponse est OK (statut 2xx)
  if (!response.ok) {
    // En cas d'erreur, essayer de r√©cup√©rer les d√©tails
    const errorData = await response.json().catch(() => null);
    const errorMessage = errorData?.message || `Erreur HTTP ${response.status}`;
    
    // Transformer en erreur avec d√©tails
    throw new Error(`Erreur HTTP ${response.status} (${errorMessage})`);
  }
  
  // Analyser et retourner la r√©ponse JSON
  return await response.json();
}

/**
 * Fonction proxy pour les requ√™tes Notion, alias de notionApiRequest
 * Maintenue pour la compatibilit√© avec le code existant
 */
export const proxyFetch = notionApiRequest;
