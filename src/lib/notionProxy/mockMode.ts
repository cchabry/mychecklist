
import { STORAGE_KEYS } from './config';
import { toast } from 'sonner';

/**
 * Utility functions for managing the mock mode
 * Used when the API isn't accessible due to CORS or other issues
 */
export const mockMode = {
  isActive: (): boolean => {
    const isMockMode = localStorage.getItem(STORAGE_KEYS.MOCK_MODE) === 'true';
    console.log(`üîç Mock mode check: ${isMockMode ? 'ACTIVE' : 'INACTIVE'}`);
    return isMockMode;
  },
  
  activate: (): void => {
    console.log('üî∂ ACTIVATING MOCK MODE - Will use demo data instead of real Notion API');
    localStorage.setItem(STORAGE_KEYS.MOCK_MODE, 'true');
    toast.warning('Mode d√©monstration activ√©', {
      description: 'Les donn√©es fictives sont utilis√©es car l\'API Notion n\'est pas accessible.',
      duration: 4000,
    });
  },
  
  deactivate: (): void => {
    console.log('üü¢ DEACTIVATING MOCK MODE - Will use real Notion API');
    localStorage.removeItem(STORAGE_KEYS.MOCK_MODE);
    toast.success('Mode r√©el activ√©', {
      description: 'L\'application utilise maintenant les donn√©es r√©elles de Notion.',
      duration: 3000,
    });
  },
  
  toggle: (): boolean => {
    const currentState = mockMode.isActive();
    console.log(`üîÑ Toggling mock mode from ${currentState ? 'ACTIVE' : 'INACTIVE'}`);
    
    if (currentState) {
      mockMode.deactivate();
      return false;
    } else {
      mockMode.activate();
      return true;
    }
  },
  
  reset: (): void => {
    // D√©sactiver le mode mock et effacer toute erreur pr√©c√©dente
    console.log('üßπ Resetting mock mode state and errors');
    localStorage.removeItem(STORAGE_KEYS.MOCK_MODE);
    localStorage.removeItem('notion_last_error');
    toast.info('√âtat du proxy r√©initialis√©', {
      description: 'Les param√®tres de connexion √† Notion ont √©t√© r√©initialis√©s.',
    });
  },
  
  /**
   * V√©rifier l'√©tat du mode mock et afficher un indicateur visuel
   */
  checkAndNotify: (): void => {
    if (mockMode.isActive()) {
      console.log('üîî Mock mode is active - showing notification');
      toast('Mode d√©monstration actif', {
        description: 'L\'application utilise des donn√©es fictives.',
        action: {
          label: 'D√©sactiver',
          onClick: () => mockMode.deactivate()
        },
        duration: 5000,
      });
    }
  },
  
  /**
   * Force l'√©tat du mode mock en fonction d'une condition
   */
  setBasedOnCondition: (condition: boolean): void => {
    if (condition) {
      // Condition true = activer le mock mode
      if (!mockMode.isActive()) {
        mockMode.activate();
      }
    } else {
      // Condition false = d√©sactiver le mock mode
      if (mockMode.isActive()) {
        mockMode.deactivate();
      }
    }
  },

  /**
   * Forcefully reset the mock mode and all related state
   * This is a more aggressive reset that will clear all mock-related storage
   */
  forceReset: (): void => {
    console.log('üßπ FORCE RESETTING all mock mode state');
    localStorage.removeItem(STORAGE_KEYS.MOCK_MODE);
    localStorage.removeItem('notion_last_error');
    localStorage.removeItem('notion_proxy_last_error');
    localStorage.removeItem('notion_proxy_status');
    
    // Also clean other caches that might be preventing real data from loading
    localStorage.removeItem('projects_cache');
    localStorage.removeItem('audit_cache');
    
    toast.success('Mode r√©el forc√©', {
      description: 'Tous les caches ont √©t√© r√©initialis√©s. L\'application utilisera les donn√©es r√©elles.',
      duration: 3000,
    });
  }
};
