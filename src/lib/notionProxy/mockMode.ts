import { STORAGE_KEYS } from './config';

/**
 * Service de gestion du mode mock pour Notion
 */

// Variable d'Ã©tat du mode mock (singleton)
let _isMockModeActive = false;
let _isForcedRealMode = false;
let _previousMockState = false;

export const mockMode = {
  isActive: () => {
    // Si on est en mode forcÃ© rÃ©el, retourner false
    if (_isForcedRealMode) return false;
    
    // Sinon, retourner l'Ã©tat actuel du mode mock
    return _isMockModeActive;
  },
  
  /**
   * Active le mode mock
   */
  activate: () => {
    console.log('ðŸ”„ Activation du mode mock pour Notion');
    localStorage.setItem(STORAGE_KEYS.MOCK_MODE, 'true');
    _isMockModeActive = true;
    return true;
  },
  
  /**
   * DÃ©sactive le mode mock
   */
  deactivate: () => {
    console.log('ðŸ”„ DÃ©sactivation du mode mock pour Notion');
    localStorage.removeItem(STORAGE_KEYS.MOCK_MODE);
    _isMockModeActive = false;
    return true;
  },
  
  /**
   * VÃ©rifie et restaure l'Ã©tat du mode mock depuis le localStorage
   */
  checkAndRestore: () => {
    const storedMockMode = localStorage.getItem(STORAGE_KEYS.MOCK_MODE);
    const shouldBeMockMode = storedMockMode === 'true';
    
    // Mettre Ã  jour l'Ã©tat interne
    _isMockModeActive = shouldBeMockMode;
    
    // Si on est dans un Ã©tat inappropriÃ©, restaurer
    const currentMockState = mockMode.isActive();
    if (currentMockState !== shouldBeMockMode && !_isForcedRealMode) {
      if (shouldBeMockMode) {
        mockMode.activate();
      } else {
        mockMode.deactivate();
      }
    }
    
    return mockMode.isActive();
  },
  
  /**
   * Bascule l'Ã©tat du mode mock
   */
  toggle: () => {
    if (mockMode.isActive()) {
      return mockMode.deactivate();
    } else {
      return mockMode.activate();
    }
  },
  
  /**
   * Force la dÃ©sactivation du mode mock temporairement
   * pour une opÃ©ration spÃ©cifique
   */
  temporarilyForceReal: () => {
    // Sauvegarder l'Ã©tat actuel
    _previousMockState = _isMockModeActive;
    
    // Forcer le mode rÃ©el
    _isForcedRealMode = true;
    
    // Retourner une fonction pour restaurer l'Ã©tat
    return () => {
      _isForcedRealMode = false;
      
      // Si nÃ©cessaire, restaurer l'Ã©tat prÃ©cÃ©dent
      if (_previousMockState && !_isMockModeActive) {
        mockMode.activate();
      }
    };
  },
  
  /**
   * Force une rÃ©initialisation complÃ¨te du mode mock
   * (utilisÃ© principalement pour les cas de diagnostic)
   */
  forceReset: () => {
    console.log('ðŸ”„ RÃ©initialisation forcÃ©e du mode mock');
    localStorage.removeItem(STORAGE_KEYS.MOCK_MODE);
    _isMockModeActive = false;
    _isForcedRealMode = false;
    _previousMockState = false;
    return true;
  }
};

// Initialiser l'Ã©tat du mode mock au dÃ©marrage
(() => {
  try {
    mockMode.checkAndRestore();
  } catch (e) {
    // Ignorer les erreurs lors de l'initialisation
    console.error("Erreur lors de l'initialisation du mode mock:", e);
  }
})();
