
import { toast } from 'sonner';
import { Audit } from '@/lib/types';
import { saveAuditToNotion } from '@/lib/notion';
import { notionApi } from '@/lib/notionProxy';

/**
 * Hook sp√©cialis√© pour la sauvegarde des audits
 * Version simplifi√©e et unifi√©e pour le sc√©nario primaire
 */
export const useAuditSaving = () => {
  /**
   * Sauvegarde un audit de mani√®re fiable
   * Gestion des cas mode mock et erreurs CORS
   */
  const saveAudit = async (
    audit: Audit | null,
    options: {
      usingNotion: boolean,
      isMockMode: boolean,
      checklistsDbId: string | null
    }
  ): Promise<boolean> => {
    console.log('üîç useAuditSaving - D√©but de la sauvegarde d\'audit', { 
      auditId: audit?.id,
      projectId: audit?.projectId,
      options
    });
    
    if (!audit) {
      console.error('‚ùå useAuditSaving - Aucun audit √† sauvegarder');
      return false;
    }
    
    try {
      // Si on est en mode mock ou si l'utilisateur n'utilise pas Notion, simuler une sauvegarde
      if (options.isMockMode || !options.usingNotion) {
        console.log('üîç useAuditSaving - Sauvegarde simul√©e (mode mock ou Notion d√©sactiv√©)');
        
        // Simuler un d√©lai pour l'UX
        await new Promise(resolve => setTimeout(resolve, 500));
        
        toast.success("Audit sauvegard√© avec succ√®s", {
          description: "Toutes les modifications ont √©t√© enregistr√©es (mode local)",
        });
        
        return true;
      }
      
      // V√©rifier que la base de donn√©es des checklists est configur√©e
      if (!options.checklistsDbId) {
        console.warn('‚ö†Ô∏è useAuditSaving - Base de donn√©es des checklists non configur√©e');
        
        toast.warning('Base de donn√©es des checklists non configur√©e', {
          description: 'Pour sauvegarder les audits dans Notion, configurez une base de donn√©es pour les checklists.'
        });
        
        // Activer le mode mock comme fallback
        notionApi.mockMode.activate();
        
        return true; // Simuler une sauvegarde r√©ussie pour ne pas bloquer l'utilisateur
      }
      
      // Sauvegarde dans Notion
      console.log('üîç useAuditSaving - Tentative de sauvegarde dans Notion');
      
      try {
        const success = await saveAuditToNotion(audit);
        
        if (success) {
          console.log('‚úÖ useAuditSaving - Sauvegarde Notion r√©ussie');
          toast.success("Audit sauvegard√© avec succ√®s", {
            description: "Toutes les modifications ont √©t√© enregistr√©es dans Notion",
          });
        } else {
          console.error('‚ùå useAuditSaving - √âchec de la sauvegarde dans Notion (false retourn√©)');
          throw new Error('√âchec de la sauvegarde dans Notion');
        }
        
        return success;
      } catch (error) {
        // G√©rer les erreurs CORS ou r√©seau
        if (error.message?.includes('Failed to fetch')) {
          console.warn('‚ö†Ô∏è useAuditSaving - Erreur CORS d√©tect√©e, activation du mode mock');
          
          // Activer le mode mock
          notionApi.mockMode.activate();
          
          toast.warning('Mode d√©monstration activ√©', {
            description: 'Sauvegarde en mode local uniquement car l\'API Notion n\'est pas accessible directement',
          });
          
          // Simuler une sauvegarde r√©ussie
          return true;
        }
        
        // Propager les autres erreurs
        throw error;
      }
    } catch (error) {
      console.error('‚ùå useAuditSaving - Erreur lors de la sauvegarde:', error);
      
      toast.error('Erreur de sauvegarde', {
        description: 'Impossible de sauvegarder les modifications: ' + (error.message || 'Erreur inconnue')
      });
      
      return false;
    }
  };
  
  return { saveAudit };
};
