
import { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { isNotionConfigured } from '@/lib/notion';
import { notionApi } from '@/lib/notionProxy';
import { resetProxyCache, verifyProxyDeployment, STORAGE_KEYS } from '@/lib/notionProxy/config';

export const useNotionIntegration = () => {
  const [usingNotion, setUsingNotion] = useState(isNotionConfigured());
  const [notionConfigOpen, setNotionConfigOpen] = useState(false);
  const [notionErrorDetails, setNotionErrorDetails] = useState({ 
    show: false, 
    error: '', 
    context: '' 
  });
  
  // V√©rifier le mode mock et le proxy au d√©marrage
  useEffect(() => {
    const checkNotionSetup = async () => {
      // V√©rifie si le for√ßage du mode r√©el a √©t√© demand√©
      const forceReal = localStorage.getItem('notion_force_real') === 'true';
      if (forceReal) {
        console.log('üîÑ useNotionIntegration: Mode r√©el forc√© - D√©sactivation du mode mock');
        localStorage.removeItem('notion_force_real');
        localStorage.removeItem(STORAGE_KEYS.MOCK_MODE);
        notionApi.mockMode.deactivate();
      }
      
      // Si Notion est configur√©, v√©rifier l'√©tat du proxy
      if (usingNotion) {
        try {
          // V√©rifier si le proxy est correctement d√©ploy√©
          const proxyIsWorking = await verifyProxyDeployment(false);
          
          if (!proxyIsWorking) {
            console.warn('‚ö†Ô∏è Proxy Notion non op√©rationnel, activation du mode d√©mo');
            // Si le proxy n'est pas op√©rationnel, activer le mode mock
            if (!notionApi.mockMode.isActive()) {
              notionApi.mockMode.activate();
              
              // Afficher une notification explicative
              toast.warning('Mode d√©monstration Notion activ√©', {
                description: 'Le proxy Notion n\'est pas accessible. L\'application utilise des donn√©es simul√©es.',
                duration: 6000,
                action: {
                  label: 'D√©tails',
                  onClick: () => setNotionErrorDetails({
                    show: true,
                    error: 'Probl√®me de connexion au proxy Notion',
                    context: 'Le proxy n\'est pas correctement d√©ploy√© ou configur√© sur Vercel'
                  })
                }
              });
            }
          } else {
            // Le proxy fonctionne, d√©sactiver le mode mock s'il est actif
            if (notionApi.mockMode.isActive() && !forceReal) {
              console.log('Proxy op√©rationnel, d√©sactivation du mode mock');
              notionApi.mockMode.deactivate();
              toast.success('Connexion Notion r√©tablie', {
                description: 'L\'application utilise maintenant des donn√©es r√©elles depuis Notion'
              });
            } else {
              console.log('Proxy op√©rationnel, mode r√©el d√©j√† actif');
            }
          }
        } catch (error) {
          console.error('Erreur lors de la v√©rification du proxy:', error);
          
          // En cas d'erreur, activer le mode mock pour s√©curiser l'exp√©rience
          if (!notionApi.mockMode.isActive() && !forceReal) {
            notionApi.mockMode.activate();
            toast.warning('Mode d√©monstration activ√© suite √† une erreur', {
              description: 'Erreur de communication avec le proxy Notion. Donn√©es simul√©es activ√©es.',
              action: {
                label: 'Forcer mode r√©el',
                onClick: () => {
                  localStorage.setItem('notion_force_real', 'true');
                  notionApi.mockMode.forceReset();
                  window.location.reload();
                }
              }
            });
          }
        }
      }
    };
    
    checkNotionSetup();
  }, [usingNotion]);
  
  const handleConnectNotionClick = () => {
    // R√©initialiser le cache du proxy avant d'ouvrir la configuration
    resetProxyCache();
    
    // Forcer le mode r√©el pour la configuration
    if (notionApi.mockMode.isActive()) {
      console.log('üîÑ D√©sactivation du mode mock pour la configuration Notion');
      localStorage.setItem('notion_force_real', 'true');
      notionApi.mockMode.deactivate();
    }
    
    setNotionConfigOpen(true);
  };
  
  const handleNotionConfigSuccess = () => {
    setUsingNotion(true);
    
    // Forcer le mode r√©el apr√®s une configuration r√©ussie
    localStorage.setItem('notion_force_real', 'true');
    
    // Si le mode mock est actif, afficher un message explicatif
    if (notionApi.mockMode.isActive()) {
      toast.info('Notion configur√© avec succ√®s', {
        description: 'Les requ√™tes Notion passeront par un proxy pour contourner les limitations CORS.',
        duration: 5000,
        action: {
          label: 'Forcer mode r√©el',
          onClick: () => {
            notionApi.mockMode.forceReset();
            window.location.reload();
          }
        }
      });
    }
  };
  
  const handleNotionConfigClose = () => {
    setNotionConfigOpen(false);
  };
  
  const showNotionError = (error: string, context?: string) => {
    setNotionErrorDetails({
      show: true,
      error,
      context: context || ''
    });
  };
  
  const hideNotionError = () => {
    setNotionErrorDetails({
      show: false,
      error: '',
      context: ''
    });
  };
  
  const verifyNotionConnection = async (): Promise<boolean> => {
    if (!usingNotion) return false;
    
    try {
      const apiKey = localStorage.getItem('notion_api_key');
      if (!apiKey) return false;
      
      // Forcer le mode r√©el pour la v√©rification
      const wasInMockMode = notionApi.mockMode.isActive();
      if (wasInMockMode) {
        console.log('üîÑ D√©sactivation temporaire du mode mock pour la v√©rification');
        localStorage.setItem('notion_force_real', 'true');
        notionApi.mockMode.deactivate();
      }
      
      // V√©rifier d'abord le d√©ploiement du proxy
      const proxyIsWorking = await verifyProxyDeployment(false);
      
      if (!proxyIsWorking) {
        console.warn('‚ö†Ô∏è Proxy Notion non op√©rationnel lors de la v√©rification');
        
        showNotionError(
          'Proxy Notion non op√©rationnel', 
          'Le fichier api/notion-proxy.ts n\'est pas correctement d√©ploy√© ou configur√© sur Vercel'
        );
        
        // Activer le mode mock pour s√©curiser l'exp√©rience mais uniquement si on n'a pas forc√© le mode r√©el
        if (!localStorage.getItem('notion_force_real')) {
          notionApi.mockMode.activate();
          
          toast.warning('Mode d√©monstration activ√©', {
            description: 'Le proxy Notion n\'est pas accessible. L\'application utilise des donn√©es simul√©es.',
            duration: 6000,
            action: {
              label: 'Forcer mode r√©el',
              onClick: () => {
                localStorage.setItem('notion_force_real', 'true');
                notionApi.mockMode.forceReset();
                window.location.reload();
              }
            }
          });
        }
        
        return true; // Permettre l'utilisation en mode mock
      }
      
      // Tester l'API Notion maintenant que le proxy est v√©rifi√©
      try {
        await notionApi.users.me(apiKey);
        console.log('Connexion Notion v√©rifi√©e via proxy');
        
        // Si on √©tait en mode mock et que √ßa fonctionne maintenant, d√©sactiver le mode mock
        if (notionApi.mockMode.isActive()) {
          notionApi.mockMode.deactivate();
          toast.success('Connexion avec l\'API Notion √©tablie', {
            description: 'Le mode d√©monstration a √©t√© d√©sactiv√©, vous utilisez maintenant des donn√©es r√©elles.',
          });
        }
        
        return true;
      } catch (apiError) {
        console.error('√âchec de la connexion √† l\'API Notion:', apiError);
        
        if (apiError.message?.includes('401')) {
          // Erreur d'authentification - probl√®me de cl√© API
          toast.error('Cl√© API Notion invalide', {
            description: 'V√©rifiez votre cl√© d\'int√©gration dans les param√®tres Notion.',
            action: {
              label: 'Configurer',
              onClick: () => {
                document.getElementById('notion-connect-button')?.click();
              }
            }
          });
          return false;
        } else {
          // Autre erreur d'API - activer le mode mock uniquement si on n'a pas forc√© le mode r√©el
          showNotionError(
            'Erreur d\'acc√®s √† l\'API Notion',
            `D√©tail: ${apiError.message || 'Erreur inconnue'}`
          );
          
          if (!localStorage.getItem('notion_force_real')) {
            notionApi.mockMode.activate();
            toast.warning('Mode d√©monstration activ√© suite √† une erreur', {
              description: 'L\'application utilisera des donn√©es de test pendant la r√©solution du probl√®me.',
              action: {
                label: 'Forcer mode r√©el',
                onClick: () => {
                  localStorage.setItem('notion_force_real', 'true');
                  notionApi.mockMode.forceReset();
                  window.location.reload();
                }
              }
            });
          }
          
          return true; // Permettre l'utilisation en mode mock
        }
      }
    } catch (connectionError) {
      console.error('√âchec de la v√©rification de la connexion Notion:', connectionError);
      
      // G√©rer l'erreur CORS "Failed to fetch"
      if (connectionError.message?.includes('Failed to fetch')) {
        showNotionError(
          'Tentative de connexion via proxy en cours', 
          'Si les donn√©es r√©elles ne s\'affichent pas, le proxy Vercel n\'est pas encore configur√© correctement.'
        );
        
        // Activer le mode mock et expliquer la situation, mais uniquement si on n'a pas forc√© le mode r√©el
        if (!localStorage.getItem('notion_force_real')) {
          notionApi.mockMode.activate();
          
          toast.warning('Mode d√©monstration activ√© temporairement', {
            description: 'L\'application utilisera des donn√©es de test pendant la configuration du proxy.',
            duration: 6000,
            action: {
              label: 'Forcer mode r√©el',
              onClick: () => {
                localStorage.setItem('notion_force_real', 'true');
                notionApi.mockMode.forceReset();
                window.location.reload();
              }
            }
          });
        }
        
        return true; // Permettre l'utilisation en mode mock
      } else {
        toast.error('Erreur d\'acc√®s √† Notion', {
          description: 'Impossible de v√©rifier la connexion √† Notion. V√©rifiez votre configuration.',
          action: {
            label: 'Forcer mode r√©el',
            onClick: () => {
              localStorage.setItem('notion_force_real', 'true');
              notionApi.mockMode.forceReset();
              window.location.reload();
            }
          }
        });
        return false;
      }
    }
  };
  
  return {
    usingNotion,
    notionConfigOpen,
    notionErrorDetails,
    setUsingNotion,
    handleConnectNotionClick,
    handleNotionConfigSuccess,
    handleNotionConfigClose,
    showNotionError,
    hideNotionError,
    verifyNotionConnection
  };
};
