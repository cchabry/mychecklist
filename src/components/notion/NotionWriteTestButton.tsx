
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { RotateCw, Check, XCircle, AlertTriangle } from 'lucide-react';
import { notionApi } from '@/lib/notionProxy';
import { toast } from 'sonner';
import { STORAGE_KEYS } from '@/lib/notionProxy/config';

interface NotionWriteTestButtonProps {
  onSuccess?: () => void;
}

// Define the type for the Notion page creation data
interface NotionCreateData {
  parent: { database_id: string };
  properties: {
    Name: { title: { text: { content: string } }[] };
    Status: { select: { name: string } };
    [key: string]: any; // Allow for additional dynamic properties
  };
}

const NotionWriteTestButton: React.FC<NotionWriteTestButtonProps> = ({ onSuccess }) => {
  const [isTesting, setIsTesting] = useState(false);
  const [testStatus, setTestStatus] = useState<'idle' | 'success' | 'error'>('idle');
  
  const handleTestWrite = async () => {
    // Toujours v√©rifier d'abord les valeurs dans localStorage
    const apiKey = localStorage.getItem('notion_api_key');
    const dbId = localStorage.getItem('notion_database_id');
    
    console.log('üîç D√©marrage du test d\'√©criture avec:', {
      'API Key pr√©sente': !!apiKey,
      'Database ID pr√©sent': !!dbId,
      'API Key (d√©but)': apiKey ? apiKey.substring(0, 8) + '...' : 'non d√©finie',
      'Database ID': dbId || 'non d√©fini'
    });
    
    if (!apiKey || !dbId) {
      toast.error('Configuration Notion requise', {
        description: 'Veuillez d\'abord configurer votre cl√© API et votre base de donn√©es Notion.'
      });
      return;
    }
    
    setIsTesting(true);
    setTestStatus('idle');
    
    try {
      // Forcer le mode r√©el pour ce test et d√©sactiver compl√®tement le mode mock
      localStorage.removeItem(STORAGE_KEYS.MOCK_MODE);
      localStorage.removeItem('notion_last_error');
      notionApi.mockMode.forceReset();
      console.log('üîÑ Test d\'√©criture: Mode r√©el forc√© temporairement');
      
      // Cr√©er un objet de test avec un timestamp pour garantir l'unicit√©
      const timestamp = new Date().toISOString();
      const testTitle = `Test d'√©criture ${timestamp}`;
      
      console.log(`üìù Tentative d'√©criture dans Notion: "${testTitle}"`);
      console.log(`üìù Utilisation de la base de donn√©es: "${dbId}"`);
      console.log(`üìù Utilisation de la cl√© API: "${apiKey.substring(0, 8)}..."`);
      
      // Pr√©paration des donn√©es pour la cr√©ation de page
      const createData: NotionCreateData = {
        parent: { database_id: dbId },
        properties: {
          Name: {
            title: [{ text: { content: testTitle } }]
          },
          Status: {
            select: { name: "Test" }
          }
        }
      };
      
      console.log('üìã Structure de donn√©es pour la cr√©ation:', JSON.stringify(createData, null, 2));
      
      // Ajouter d'autres propri√©t√©s courantes au cas o√π elles sont requises
      try {
        // Tenter d'ajouter une propri√©t√© URL (optionnelle)
        createData.properties.URL = {
          url: "https://test.example.com"
        };
        
        // Tenter d'ajouter d'autres propri√©t√©s courantes
        try {
          createData.properties.Description = {
            rich_text: [{ text: { content: "Description de test automatique" } }]
          };
        } catch (e) {
          console.log('‚ÑπÔ∏è La propri√©t√© Description n\'est peut-√™tre pas support√©e');
        }
        
        try {
          createData.properties.Tags = {
            multi_select: [{ name: "Test" }]
          };
        } catch (e) {
          console.log('‚ÑπÔ∏è La propri√©t√© Tags n\'est peut-√™tre pas support√©e');
        }
        
      } catch (e) {
        // Ignorer si la propri√©t√© URL n'est pas support√©e
        console.log('‚ÑπÔ∏è La propri√©t√© URL n\'est peut-√™tre pas support√©e par cette base de donn√©es');
      }
      
      // Tentative de cr√©ation via le proxy
      console.log('üì° Envoi de la requ√™te de cr√©ation avec les donn√©es:', JSON.stringify(createData, null, 2));
      
      // Tester la structure des propri√©t√©s de la base de donn√©es
      try {
        console.log('üîç V√©rification de la structure de la base de donn√©es avant cr√©ation...');
        const dbDetails = await notionApi.databases.retrieve(dbId, apiKey);
        console.log('‚úÖ Structure de la base de donn√©es r√©cup√©r√©e:', JSON.stringify(dbDetails.properties, null, 2));
        
        // Analyser les propri√©t√©s requises de la base de donn√©es
        const requiredProps = Object.entries(dbDetails.properties)
          .filter(([_, prop]: [string, any]) => prop.type === 'title' || (prop.type === 'rich_text' && prop.rich_text?.is_required))
          .map(([name, _]: [string, any]) => name);
          
        console.log('‚ö†Ô∏è Propri√©t√©s potentiellement requises dans la base:', requiredProps);
        
        // Assurer que toutes les propri√©t√©s requises sont pr√©sentes
        if (requiredProps.length > 0) {
          for (const propName of requiredProps) {
            if (!createData.properties[propName]) {
              if (propName === 'Name' || propName === 'Nom' || propName === 'Title' || propName === 'Titre') {
                // D√©j√† d√©fini comme Name, mais peut-√™tre que la base utilise un nom diff√©rent
                createData.properties[propName] = createData.properties.Name;
                console.log(`üîÑ Ajout de la propri√©t√© requise "${propName}" (copie de Name)`);
              } else {
                // Ajouter une valeur par d√©faut pour cette propri√©t√© requise
                createData.properties[propName] = {
                  rich_text: [{ text: { content: "Valeur de test requise" } }]
                };
                console.log(`üîÑ Ajout de valeur par d√©faut pour la propri√©t√© requise "${propName}"`);
              }
            }
          }
        }
      } catch (dbError) {
        console.error('‚ùå Erreur lors de la v√©rification de la structure de la base:', dbError);
        // Continuer quand m√™me, car l'erreur pourrait venir d'autre chose
      }
      
      console.log('üì° Envoi FINAL de la requ√™te avec donn√©es:', JSON.stringify(createData, null, 2));
      
      const response = await notionApi.pages.create(createData, apiKey);
      
      if (response && response.id) {
        console.log('‚úÖ Test d\'√©criture r√©ussi! ID de la page cr√©√©e:', response.id);
        
        // On essaie maintenant de lire la page qu'on vient de cr√©er pour v√©rifier
        const pageData = await notionApi.pages.retrieve(response.id, apiKey);
        
        if (pageData && pageData.id === response.id) {
          console.log('‚úÖ Lecture de la page cr√©√©e r√©ussie!');
          setTestStatus('success');
          toast.success('Test d\'√©criture r√©ussi', {
            description: 'Une page de test a √©t√© cr√©√©e et lue avec succ√®s dans votre base de donn√©es Notion.'
          });
          
          // Supprimer la page de test si possible (optionnel, pas bloquant)
          try {
            // Tentative de "suppression" (archive) via mise √† jour
            await notionApi.pages.update(response.id, {
              archived: true
            }, apiKey);
            console.log('üßπ Nettoyage: Page de test archiv√©e');
          } catch (cleanupError) {
            console.log('‚ö†Ô∏è Impossible d\'archiver la page de test:', cleanupError);
            // On ne bloque pas le flux en cas d'√©chec de nettoyage
          }
          
          // Appeler le callback onSuccess si fourni
          if (onSuccess) {
            onSuccess();
          }
        } else {
          throw new Error('√âchec de la lecture apr√®s √©criture');
        }
      } else {
        throw new Error('La cr√©ation a √©chou√© (pas d\'ID retourn√©)');
      }
    } catch (error) {
      console.error('‚ùå Test d\'√©criture Notion √©chou√©:', error);
      console.error('‚ùå Message d\'erreur complet:', error.message);
      
      // D√©tails suppl√©mentaires sur l'erreur
      if (error.response) {
        console.error('‚ùå Donn√©es de r√©ponse:', JSON.stringify(error.response, null, 2));
      }
      
      setTestStatus('error');
      
      // Afficher un message d'erreur d√©taill√© et plus explicite
      let errorMessage = '√âchec du test d\'√©criture';
      let errorDescription = '';
      
      if (error.message?.includes('401')) {
        errorMessage = 'Authentification √©chou√©e';
        errorDescription = 'V√©rifiez votre cl√© API. Elle peut √™tre invalide ou expir√©e.';
      } else if (error.message?.includes('403')) {
        errorMessage = 'Acc√®s refus√©';
        errorDescription = 'V√©rifiez que votre int√©gration Notion a les permissions d\'√©criture et a √©t√© correctement connect√©e √† votre base de donn√©es dans le menu "..." > "Connexions".';
      } else if (error.message?.includes('404')) {
        errorMessage = 'Base de donn√©es introuvable';
        errorDescription = 'V√©rifiez l\'ID de base de donn√©es et assurez-vous qu\'elle existe toujours.';
      } else if (error.message?.includes('Failed to fetch') || error.message?.includes('network') || error.message?.includes('CORS')) {
        errorMessage = 'Probl√®me de r√©seau';
        errorDescription = 'Erreur CORS ou connexion internet. Le proxy ne fonctionne peut-√™tre pas correctement. V√©rifiez que le proxy est correctement d√©ploy√©.';
      } else if (error.message?.includes('required') || error.message?.includes('validation_error')) {
        errorMessage = 'Erreur de validation';
        errorDescription = 'Structure de donn√©es incorrecte. Certains champs requis peuvent manquer ou √™tre mal format√©s.';
        
        // Ajouter des d√©tails sur l'erreur
        if (error.message) {
          errorDescription += '\nD√©tails: ' + error.message;
        }
      } else {
        errorDescription = error.message || 'Erreur inconnue lors du test d\'√©criture.';
      }
      
      toast.error(errorMessage, {
        description: errorDescription,
        duration: 8000,
        action: {
          label: 'R√©initialiser',
          onClick: () => {
            notionApi.mockMode.forceReset();
            localStorage.removeItem(STORAGE_KEYS.MOCK_MODE);
            localStorage.removeItem('notion_last_error');
            setTimeout(() => window.location.reload(), 500);
          }
        }
      });
    } finally {
      setIsTesting(false);
    }
  };
  
  return (
    <Button
      variant="outline"
      size="sm"
      className={`gap-2 ${
        testStatus === 'success' 
          ? 'text-green-600 border-green-300 hover:bg-green-50' 
          : testStatus === 'error'
          ? 'text-red-600 border-red-300 hover:bg-red-50'
          : 'text-gray-600 border-gray-300 hover:bg-gray-50'
      }`}
      onClick={handleTestWrite}
      disabled={isTesting}
    >
      {isTesting ? (
        <RotateCw size={16} className="animate-spin" />
      ) : testStatus === 'success' ? (
        <Check size={16} />
      ) : testStatus === 'error' ? (
        <XCircle size={16} />
      ) : (
        <AlertTriangle size={16} />
      )}
      Test d'√©criture
    </Button>
  );
};

export default NotionWriteTestButton;
