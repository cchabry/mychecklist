
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { AlertCircle, Check, FileText, RotateCw } from 'lucide-react';
import { toast } from 'sonner';
import { notionApi } from '@/lib/notionProxy';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useOperationModeListener } from '@/hooks/useOperationModeListener';

interface WriteTestButtonProps {
  databaseId: string;
  apiKey: string | null;
  label?: string;
}

// Interface pour typer les propri√©t√©s Notion
interface NotionProperty {
  type: string;
  [key: string]: any;
}

interface NotionProperties {
  [key: string]: NotionProperty;
}

interface NotionDatabase {
  id: string;
  title?: Array<{plain_text?: string}>;
  properties: NotionProperties;
  [key: string]: any;
}

const WriteTestButton: React.FC<WriteTestButtonProps> = ({ 
  databaseId, 
  apiKey, 
  label = "Tester l'√©criture" 
}) => {
  const [isTesting, setIsTesting] = useState(false);
  const [status, setStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [details, setDetails] = useState<string | null>(null);
  const { isDemoMode, toggleMode } = useOperationModeListener();
  
  const runWriteTest = async () => {
    if (!apiKey) {
      toast.error('Cl√© API requise', {
        description: 'Veuillez d\'abord configurer votre cl√© API Notion'
      });
      return;
    }
    
    if (!databaseId) {
      toast.error('ID de base de donn√©es requis', {
        description: 'Veuillez s√©lectionner une base de donn√©es'
      });
      return;
    }
    
    setIsTesting(true);
    setStatus('idle');
    setDetails(null);
    
    try {
      // Forcer le mode r√©el pour le test (d√©sactiver temporairement le mode d√©mo)
      const wasInDemoMode = isDemoMode;
      if (wasInDemoMode) {
        console.log('üí° D√©sactivation temporaire du mode d√©mo pour le test d\'√©criture');
        toggleMode();
      }
      
      console.log(`üîç Test d'√©criture dans la base ${databaseId.substring(0, 8)}...`);
      
      // 1. R√©cup√©rer la structure de la base de donn√©es pour comprendre les propri√©t√©s requises
      console.log('1Ô∏è‚É£ R√©cup√©ration de la structure de la base de donn√©es...');
      const dbDetails = await notionApi.databases.retrieve(databaseId, apiKey) as NotionDatabase;
      console.log('‚úÖ Structure r√©cup√©r√©e:', dbDetails);
      
      // Extraire le titre de la base de donn√©es
      const dbTitle = dbDetails.title?.[0]?.plain_text || databaseId;
      console.log(`üìä Base de donn√©es: "${dbTitle}"`);
      
      // Analyser les propri√©t√©s pour trouver celles requises et leurs types
      console.log('2Ô∏è‚É£ Analyse des propri√©t√©s de la base de donn√©es...');
      const properties = dbDetails.properties || {};
      
      // Identifier la propri√©t√© title (n√©cessaire pour toute page Notion)
      let titleProperty: string | null = null;
      
      for (const [name, prop] of Object.entries(properties)) {
        if (prop.type === 'title') {
          titleProperty = name;
          break;
        }
      }
      
      if (!titleProperty) {
        throw new Error('Aucune propri√©t√© de type "title" trouv√©e dans la base de donn√©es');
      }
      
      console.log(`üîë Propri√©t√© titre identifi√©e: "${titleProperty}"`);
      
      // Construire un objet avec les propri√©t√©s minimales requises
      const timestamp = new Date().toISOString();
      const testData: any = {
        parent: { database_id: databaseId },
        properties: {
          [titleProperty]: {
            title: [
              {
                text: {
                  content: `Test d'√©criture ${timestamp}`
                }
              }
            ]
          }
        }
      };
      
      // Ajouter quelques propri√©t√©s communes pour maximiser les chances de succ√®s
      // pour les sch√©mas courants de bases de donn√©es
      for (const [name, prop] of Object.entries(properties)) {
        if (name === titleProperty) continue; // D√©j√† ajout√©
        
        if (prop.type === 'rich_text') {
          testData.properties[name] = {
            rich_text: [
              {
                text: {
                  content: "Texte de test"
                }
              }
            ]
          };
          console.log(`üìù Ajout de propri√©t√© rich_text: "${name}"`);
        } 
        else if (prop.type === 'select' && prop.select?.options?.length > 0) {
          testData.properties[name] = {
            select: {
              name: prop.select.options[0].name
            }
          };
          console.log(`üîΩ Ajout de propri√©t√© select: "${name}" = "${prop.select.options[0].name}"`);
        }
        else if (prop.type === 'url') {
          testData.properties[name] = {
            url: "https://exemple.fr"
          };
          console.log(`üîó Ajout de propri√©t√© url: "${name}"`);
        }
        else if (prop.type === 'number') {
          testData.properties[name] = {
            number: 42
          };
          console.log(`üî¢ Ajout de propri√©t√© number: "${name}"`);
        }
        else if (prop.type === 'checkbox') {
          testData.properties[name] = {
            checkbox: false
          };
          console.log(`‚úì Ajout de propri√©t√© checkbox: "${name}"`);
        }
      }
      
      console.log('3Ô∏è‚É£ Cr√©ation d\'une page de test avec donn√©es:', testData);
      
      // Effectuer la requ√™te de cr√©ation
      const response = await notionApi.pages.create(testData, apiKey);
      
      console.log('‚úÖ Page de test cr√©√©e avec succ√®s:', response);
      
      // V√©rifier l'ID de la page cr√©√©e
      const pageId = response.id;
      
      if (!pageId) {
        throw new Error('La r√©ponse de cr√©ation de page ne contient pas d\'ID');
      }
      
      console.log(`üìÑ Page cr√©√©e avec ID: ${pageId}`);
      
      // 4. Archiver la page de test (nettoyage)
      console.log('4Ô∏è‚É£ Archivage de la page de test...');
      const archiveResponse = await notionApi.pages.update(pageId, {
        archived: true
      }, apiKey);
      
      console.log('‚úÖ Page archiv√©e:', archiveResponse);
      
      // Success
      setStatus('success');
      setDetails(`Test d'√©criture r√©ussi! Page cr√©√©e et archiv√©e dans ${dbTitle}`);
      
      toast.success('Test d\'√©criture r√©ussi', {
        description: `Une page de test a √©t√© cr√©√©e et archiv√©e dans "${dbTitle}"`
      });
      
      // Restaurer le mode d√©mo si n√©cessaire
      if (wasInDemoMode) {
        console.log('üîÑ Restauration du mode d√©mo apr√®s test r√©ussi');
        toggleMode();
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du test d\'√©criture:', error);
      
      setStatus('error');
      setDetails(`Erreur: ${error.message || 'Erreur inconnue'}`);
      
      // Message d'erreur adapt√©
      let errorTitle = '√âchec du test d\'√©criture';
      let errorDescription = error.message;
      
      if (error.message?.includes('401')) {
        errorTitle = 'Erreur d\'authentification';
        errorDescription = 'V√©rifiez que votre cl√© API est valide et n\'a pas expir√©.';
      } else if (error.message?.includes('403')) {
        errorTitle = 'Acc√®s refus√©';
        errorDescription = 'V√©rifiez que votre int√©gration a les permissions d\'√©criture sur cette base de donn√©es.';
      } else if (error.message?.includes('404')) {
        errorTitle = 'Base de donn√©es introuvable';
        errorDescription = 'L\'ID de base de donn√©es fourni n\'existe pas ou n\'est plus accessible.';
      } else if (error.message?.includes('validation_error')) {
        errorTitle = 'Erreur de validation';
        errorDescription = 'Les donn√©es ne correspondent pas au sch√©ma de la base. D√©tails: ' + error.message;
      }
      
      toast.error(errorTitle, {
        description: errorDescription
      });
    } finally {
      setIsTesting(false);
    }
  };
  
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            className={`gap-2 ${
              status === 'success' 
                ? 'border-green-300 text-green-700' 
                : status === 'error'
                ? 'border-red-300 text-red-700'
                : ''
            }`}
            onClick={runWriteTest}
            disabled={isTesting}
          >
            {isTesting ? (
              <RotateCw className="h-4 w-4 animate-spin" />
            ) : status === 'success' ? (
              <Check className="h-4 w-4" />
            ) : status === 'error' ? (
              <AlertCircle className="h-4 w-4" />
            ) : (
              <FileText className="h-4 w-4" />
            )}
            {label}
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          {details || `Tester l'√©criture dans la base de donn√©es s√©lectionn√©e`}
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

export default WriteTestButton;
