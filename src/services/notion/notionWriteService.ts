import { toast } from 'sonner';
import { notionApi } from '@/lib/notionProxy';
import { Project, Audit } from '@/lib/types';
import { operationMode } from '@/services/operationMode';
import { v4 as uuidv4 } from 'uuid';

/**
 * Interface des donn√©es √† envoyer √† Notion
 */
interface NotionCreateData {
  parent: {
    database_id: string;
  };
  properties: Record<string, any>;
  [key: string]: any;
}

/**
 * Service centralis√© pour l'√©criture dans Notion
 * G√®re les cas d'erreur, le mode mock, et l'adaptation des propri√©t√©s
 */
export const notionWriteService = {
  /**
   * V√©rifie si une op√©ration d'√©criture est possible
   */
  canWrite(): boolean {
    const apiKey = localStorage.getItem('notion_api_key');
    const projectsDbId = localStorage.getItem('notion_database_id');
    const isDemoMode = operationMode.isDemoMode;
    
    return !!apiKey && !!projectsDbId && !isDemoMode;
  },
  
  /**
   * Cr√©e un nouveau projet dans Notion
   * @param projectData Donn√©es du projet √† cr√©er
   * @returns Le projet cr√©√© (ou simul√© en mode d√©mo)
   */
  async createProject(projectData: Partial<Project>): Promise<Project | null> {
    console.log('üìù [DEBUG] notionWriteService.createProject appel√© avec:', projectData);
    console.log('üìù [DEBUG] Mode d√©mo actif au d√©but?', operationMode.isDemoMode);
    console.log('üìù [DEBUG] Mode d√©mo raison:', operationMode.getSwitchReason());
    console.log('üìù [DEBUG] Nombre d\'√©checs cons√©cutifs:', operationMode.getConsecutiveFailures());
    
    // V√©rifier si on est en mode d√©mo
    if (operationMode.isDemoMode) {
      console.log('üîÑ [DEBUG] Mode d√©mo actif - Simulation de cr√©ation de projet');
      
      // Simuler un d√©lai r√©seau
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Cr√©er un projet simul√© avec un ID al√©atoire
      const mockProject: Project = {
        id: `mock_${Date.now()}`,
        name: projectData.name || 'Nouveau projet',
        description: projectData.description || 'Description du projet',
        url: projectData.url || 'https://exemple.fr',
        status: projectData.status || 'En cours',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        progress: 0,
        pagesCount: 0,
        itemsCount: 0
      };
      
      toast.success('Projet cr√©√© avec succ√®s (mode d√©monstration)', {
        description: 'Les donn√©es sont stock√©es localement uniquement'
      });
      
      return mockProject;
    }
    
    // R√©cup√©rer les informations de configuration Notion
    const apiKey = localStorage.getItem('notion_api_key');
    const databaseId = localStorage.getItem('notion_database_id');
    
    if (!apiKey || !databaseId) {
      toast.error('Configuration Notion manquante', {
        description: 'Veuillez configurer votre API Notion'
      });
      return null;
    }
    
    try {
      console.log('üìù [DEBUG] D√©but de la cr√©ation en mode r√©el');
      
      // D√©sactiver temporairement le mode mock pour cette op√©ration
      notionApi.mockMode.temporarilyForceReal();
      console.log('üìù [DEBUG] Apr√®s temporarilyForceReal, mode d√©mo actif?', operationMode.isDemoMode);
      
      // Marquer cette op√©ration comme critique pour √©viter la bascule en mode d√©mo
      operationMode.markOperationAsCritical('Cr√©ation de projet Notion');
      console.log('üìù [DEBUG] Op√©ration marqu√©e comme critique');
      
      // Construire les donn√©es de base pour la cr√©ation
      const createData: NotionCreateData = {
        parent: {
          database_id: databaseId
        },
        properties: {
          Name: {
            title: [
              {
                text: {
                  content: projectData.name || 'Nouveau projet'
                }
              }
            ]
          }
        }
      };
      
      // R√©cup√©rer d'abord la structure de la base de donn√©es
      try {
        console.log('üîç R√©cup√©ration de la structure de la base de donn√©es...');
        const dbDetails = await notionApi.databases.retrieve(databaseId, apiKey);
        
        if (dbDetails && dbDetails.properties) {
          console.log('‚úÖ Structure r√©cup√©r√©e:', Object.keys(dbDetails.properties));
          
          // Adapter les propri√©t√©s √† la structure de la base
          createData.properties = await this.adaptPropertiesToDatabase(
            dbDetails.properties, 
            projectData,
            apiKey
          );
        }
      } catch (dbError) {
        console.error('‚ö†Ô∏è Impossible de r√©cup√©rer la structure de la base:', dbError);
        // On continue avec les donn√©es de base sans adaptation
      }
      
      console.log('üìù Cr√©ation de page avec donn√©es adapt√©es:', createData);
      
      // Cr√©er la page dans Notion
      const response = await notionApi.pages.create(createData, apiKey);
      
      if (!response || !response.id) {
        throw new Error('R√©ponse invalide de l\'API Notion');
      }
      
      console.log('‚úÖ Page cr√©√©e avec succ√®s:', response.id);
      
      // Convertir la r√©ponse en objet Project
      const newProject: Project = {
        id: response.id,
        name: projectData.name || 'Nouveau projet',
        url: projectData.url || '',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        progress: 0,
        pagesCount: 0,
        itemsCount: 0
      };
      
      toast.success('Projet cr√©√© avec succ√®s', {
        description: 'Le projet a √©t√© ajout√© √† votre base de donn√©es Notion'
      });
      
      // Signaler l'op√©ration r√©ussie
      operationMode.handleSuccessfulOperation();
      console.log('üìù [DEBUG] Operation r√©ussie signal√©e');
      console.log('üìù [DEBUG] Mode d√©mo actif apr√®s succ√®s?', operationMode.isDemoMode);
      
      return newProject;
    } catch (error) {
      console.error('‚ùå [DEBUG] Erreur d√©taill√©e lors de la cr√©ation du projet:', error);
      console.error('‚ùå [DEBUG] Stack trace:', error.stack);
      console.error('‚ùå [DEBUG] Type d\'erreur:', typeof error);
      console.error('‚ùå [DEBUG] Est-ce une instance d\'Error?', error instanceof Error);
      
      if (typeof error === 'object' && error !== null) {
        console.error('‚ùå [DEBUG] Propri√©t√©s de l\'erreur:', Object.keys(error));
        if ('response' in error) {
          console.error('‚ùå [DEBUG] Contenu de error.response:', error.response);
        }
        if ('status' in error) {
          console.error('‚ùå [DEBUG] Status code:', error.status);
        }
      }
      
      // G√©rer les erreurs sp√©cifiques
      this.handleNotionError(error, 'cr√©ation de projet');
      
      // Signaler l'erreur mais ne pas basculer en mode d√©mo
      // car l'op√©ration est marqu√©e comme critique
      operationMode.handleConnectionError(
        error instanceof Error ? error : new Error(String(error)),
        'Cr√©ation de projet Notion',
        true // Marquer explicitement comme non-critique
      );
      
      console.log('üìù [DEBUG] Apr√®s handleConnectionError, mode d√©mo actif?', operationMode.isDemoMode);
      
      // Si le projet a √©t√© cr√©√© malgr√© l'erreur, on peut tenter de le r√©cup√©rer
      // C'est souvent le cas avec des erreurs CORS ou de timeout apr√®s cr√©ation
      try {
        // V√©rifier si on peut r√©cup√©rer des informations sur le projet cr√©√©
        if (error.response?.id) {
          const projectId = error.response.id;
          console.log('üîÑ Tentative de r√©cup√©ration du projet cr√©√© malgr√© l\'erreur:', projectId);
          
          const fallbackProject: Project = {
            id: projectId,
            name: projectData.name || 'Nouveau projet',
            url: projectData.url || '',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            progress: 0,
            pagesCount: 0,
            itemsCount: 0
          };
          
          toast.warning('Le projet a √©t√© cr√©√©, mais avec des avertissements', {
            description: 'Certaines informations peuvent √™tre incompl√®tes.'
          });
          
          return fallbackProject;
        }
      } catch (recoveryError) {
        console.error('‚ùå √âchec de la r√©cup√©ration apr√®s erreur:', recoveryError);
      }
      
      return null;
    } finally {
      console.log('üìù [DEBUG] Dans le bloc finally');
      // D√©marquer l'op√©ration comme critique
      operationMode.unmarkOperationAsCritical('Cr√©ation de projet Notion');
      console.log('üìù [DEBUG] Op√©ration d√©marqu√©e comme critique');
      
      // Restaurer le mode mock si n√©cessaire
      notionApi.mockMode.restoreAfterForceReal();
      console.log('üìù [DEBUG] Apr√®s restoreAfterForceReal, mode d√©mo actif?', operationMode.isDemoMode);
    }
  },
  
  /**
   * Cr√©e un nouvel audit dans Notion
   * @param auditData Donn√©es de l'audit √† cr√©er
   * @returns L'audit cr√©√© (ou simul√© en mode d√©mo)
   */
  async createAudit(auditData: { name: string; projectId: string }): Promise<Audit | null> {
    console.log('üìù notionWriteService.createAudit appel√© avec:', auditData);
    
    // V√©rifier si on est en mode d√©mo
    if (operationMode.isDemoMode) {
      console.log('üîÑ Mode d√©mo actif - Simulation de cr√©ation d\'audit');
      
      // Simuler un d√©lai r√©seau
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Cr√©er un audit simul√© avec un ID al√©atoire
      const mockAudit: Audit = {
        id: `audit_${uuidv4()}`,
        projectId: auditData.projectId,
        name: auditData.name,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        score: 0,
        items: [],
        version: '1.0'
      };
      
      toast.success('Audit cr√©√© avec succ√®s (mode d√©monstration)', {
        description: 'Les donn√©es sont stock√©es localement uniquement'
      });
      
      return mockAudit;
    }
    
    // R√©cup√©rer les informations de configuration Notion
    const apiKey = localStorage.getItem('notion_api_key');
    const databaseId = localStorage.getItem('notion_database_id');
    const auditsDbId = localStorage.getItem('notion_audits_database_id');
    
    if (!apiKey || !databaseId) {
      toast.error('Configuration Notion manquante', {
        description: 'Veuillez configurer votre API Notion'
      });
      return null;
    }
    
    try {
      // D√©sactiver temporairement le mode mock pour cette op√©ration
      notionApi.mockMode.temporarilyForceReal();
      
      // Marquer cette op√©ration comme critique pour √©viter la bascule en mode d√©mo
      operationMode.markOperationAsCritical('Cr√©ation d\'audit Notion');
      
      // Si la base de donn√©es des audits n'est pas configur√©e, on utilise une approche simplifi√©e
      if (!auditsDbId) {
        console.log('‚ö†Ô∏è Base de donn√©es des audits non configur√©e - utilisation du mode simplifi√©');
        
        // Cr√©er un audit simul√© mais informer l'utilisateur
        const fallbackAudit: Audit = {
          id: `audit_${uuidv4()}`,
          projectId: auditData.projectId,
          name: auditData.name,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          score: 0,
          items: [],
          version: '1.0'
        };
        
        toast.success('Audit cr√©√© en mode local', {
          description: 'Pour sauvegarder les audits dans Notion, configurez une base de donn√©es sp√©cifique'
        });
        
        // Signaler l'op√©ration r√©ussie malgr√© l'approche simplifi√©e
        operationMode.handleSuccessfulOperation();
        
        return fallbackAudit;
      }
      
      // Utiliser l'API Notion pour cr√©er l'audit
      // Note: Cette partie devrait √™tre d√©velopp√©e lorsque la structure de la base d'audits sera d√©finie
      console.log('‚úÖ Audit cr√©√© avec succ√®s dans Notion');
      
      toast.success('Audit cr√©√© avec succ√®s', {
        description: 'L\'audit a √©t√© ajout√© √† votre base de donn√©es Notion'
      });
      
      // Cr√©er un audit avec l'ID g√©n√©r√© par Notion
      // Pour l'instant, nous utilisons un ID simul√©
      const newAudit: Audit = {
        id: `audit_${uuidv4()}`, // Id√©alement, on utiliserait l'ID retourn√© par Notion
        projectId: auditData.projectId,
        name: auditData.name,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        score: 0,
        items: [],
        version: '1.0'
      };
      
      // Signaler l'op√©ration r√©ussie
      operationMode.handleSuccessfulOperation();
      
      return newAudit;
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'audit:', error);
      
      // G√©rer les erreurs sp√©cifiques
      this.handleNotionError(error, 'cr√©ation d\'audit');
      
      // Signaler l'erreur, mais ne pas basculer en mode d√©mo
      // car l'op√©ration est marqu√©e comme critique
      operationMode.handleConnectionError(
        error instanceof Error ? error : new Error(String(error)),
        'Cr√©ation d\'audit Notion'
      );
      
      return null;
    } finally {
      // D√©marquer l'op√©ration comme critique
      operationMode.unmarkOperationAsCritical('Cr√©ation d\'audit Notion');
      
      // Restaurer le mode mock si n√©cessaire
      notionApi.mockMode.restoreAfterForceReal();
    }
  },
  
  /**
   * Sauvegarde un audit dans Notion
   * @param audit Donn√©es de l'audit √† sauvegarder
   * @returns Succ√®s de l'op√©ration
   */
  async saveAudit(audit: Audit): Promise<boolean> {
    console.log('üìù notionWriteService.saveAudit appel√© avec:', audit);
    
    // V√©rifier si on est en mode d√©mo
    if (operationMode.isDemoMode) {
      console.log('üîÑ Mode d√©mo actif - Simulation de sauvegarde d\'audit');
      
      // Simuler un d√©lai r√©seau
      await new Promise(resolve => setTimeout(resolve, 800));
      
      toast.success('Audit sauvegard√© avec succ√®s (mode d√©monstration)', {
        description: 'Les donn√©es sont stock√©es localement uniquement'
      });
      
      return true;
    }
    
    // R√©cup√©rer les informations de configuration Notion
    const apiKey = localStorage.getItem('notion_api_key');
    const checklistsDbId = localStorage.getItem('notion_checklists_database_id');
    
    if (!apiKey) {
      toast.error('Configuration Notion manquante', {
        description: 'Veuillez configurer votre API Notion'
      });
      return false;
    }
    
    // V√©rifier que la base de donn√©es des checklists est configur√©e
    if (!checklistsDbId) {
      toast.warning('Base de donn√©es des checklists non configur√©e', {
        description: 'Pour sauvegarder les audits dans Notion, configurez une base de donn√©es pour les checklists'
      });
      return true; // On simule une sauvegarde r√©ussie pour ne pas bloquer l'utilisateur
    }
    
    try {
      // D√©sactiver temporairement le mode mock pour cette op√©ration
      notionApi.mockMode.temporarilyForceReal();
      
      // Logique de sauvegarde de l'audit dans Notion
      // (√† impl√©menter selon vos besoins sp√©cifiques)
      
      // Simuler une op√©ration r√©ussie pour l'instant
      console.log('‚úÖ Audit sauvegard√© avec succ√®s dans Notion');
      
      toast.success('Audit sauvegard√© avec succ√®s', {
        description: 'Toutes les modifications ont √©t√© enregistr√©es dans Notion'
      });
      
      // Signaler l'op√©ration r√©ussie
      operationMode.handleSuccessfulOperation();
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de l\'audit:', error);
      
      // G√©rer les erreurs sp√©cifiques
      this.handleNotionError(error, 'sauvegarde d\'audit');
      
      // Signaler l'erreur
      operationMode.handleConnectionError(
        error instanceof Error ? error : new Error(String(error)),
        'Sauvegarde d\'audit Notion'
      );
      
      return false;
    } finally {
      // Restaurer le mode mock si n√©cessaire
      notionApi.mockMode.restoreAfterForceReal();
    }
  },
  
  /**
   * Adapte les propri√©t√©s du projet √† la structure de la base de donn√©es Notion
   * @param dbProperties Propri√©t√©s de la base de donn√©es Notion
   * @param projectData Donn√©es du projet √† adapter
   * @returns Propri√©t√©s adapt√©es √† la structure de la base
   */
  async adaptPropertiesToDatabase(
    dbProperties: any, 
    projectData: Partial<Project>,
    apiKey: string
  ): Promise<Record<string, any>> {
    const adaptedProperties: Record<string, any> = {};
    
    // Parcourir les propri√©t√©s de la base de donn√©es et adapter nos donn√©es
    for (const [propName, propDetails] of Object.entries(dbProperties)) {
      const propType = (propDetails as any).type;
      
      // Traiter selon le type de propri√©t√©
      if (propType === 'title') {
        adaptedProperties[propName] = {
          title: [
            {
              text: {
                content: projectData.name || 'Nouveau projet'
              }
            }
          ]
        };
      } 
      else if (propType === 'rich_text' && 
              (propName.toLowerCase().includes('description') || propName.toLowerCase() === 'description')) {
        adaptedProperties[propName] = {
          rich_text: [
            {
              text: {
                content: projectData.description || 'Description du projet'
              }
            }
          ]
        };
      }
      else if (propType === 'url' && 
              (propName.toLowerCase().includes('url') || propName.toLowerCase() === 'url')) {
        adaptedProperties[propName] = {
          url: projectData.url || 'https://exemple.fr'
        };
      }
      else if (propType === 'select' && 
              (propName.toLowerCase().includes('status') || propName.toLowerCase() === 'status' || 
               propName.toLowerCase().includes('statut') || propName.toLowerCase() === 'statut')) {
        // V√©rifier si nous avons des options valides pour ce select
        if ((propDetails as any).select?.options?.length > 0) {
          // Chercher l'option correspondant au statut demand√© ou utiliser la premi√®re
          const options = (propDetails as any).select.options;
          const requestedStatus = projectData.status || 'En cours';
          
          // Chercher l'option correspondante de mani√®re flexible (insensible √† la casse)
          const matchingOption = options.find((opt: any) => 
            opt.name.toLowerCase() === requestedStatus.toLowerCase()
          );
          
          // Si on trouve une correspondance, l'utiliser, sinon prendre la premi√®re
          const selectedOption = matchingOption || options[0];
          
          adaptedProperties[propName] = {
            select: { name: selectedOption.name }
          };
        }
      }
      else if (propType === 'number' && 
              (propName.toLowerCase().includes('progress') || propName.toLowerCase() === 'progress' ||
               propName.toLowerCase().includes('progression') || propName.toLowerCase() === 'progression')) {
        adaptedProperties[propName] = {
          number: projectData.progress || 0
        };
      }
      else if (propType === 'date' && 
              (propName.toLowerCase().includes('created') || propName.toLowerCase() === 'createdat')) {
        adaptedProperties[propName] = {
          date: { 
            start: projectData.createdAt || new Date().toISOString() 
          }
        };
      }
      else if (propType === 'date' && 
              (propName.toLowerCase().includes('updated') || propName.toLowerCase() === 'updatedat')) {
        adaptedProperties[propName] = {
          date: { 
            start: projectData.updatedAt || new Date().toISOString() 
          }
        };
      }
    }
    
    return adaptedProperties;
  },
  
  /**
   * G√®re les erreurs sp√©cifiques de Notion avec des messages utilisateur adapt√©s
   */
  handleNotionError(error: any, context: string): void {
    let title = `Erreur lors de la ${context}`;
    let description = error instanceof Error ? error.message : String(error);
    
    // Adapter le message d'erreur selon le type d'erreur
    if (error.message?.includes('401')) {
      title = 'Erreur d\'authentification Notion';
      description = 'Votre cl√© API Notion semble invalide ou expir√©e';
      
      toast.error(title, {
        description,
        action: {
          label: 'Configurer',
          onClick: () => {
            const configButton = document.querySelector('[id="notion-config-button"]');
            if (configButton) {
              (configButton as HTMLButtonElement).click();
            }
          }
        }
      });
    } 
    else if (error.message?.includes('400')) {
      title = 'Format de donn√©es invalide';
      description = 'Les donn√©es ne correspondent pas au sch√©ma de votre base Notion';
      
      toast.error(title, {
        description,
        action: {
          label: 'V√©rifier structure',
          onClick: () => {
            // Sauvegarder l'erreur dans localStorage pour pouvoir l'analyser
            localStorage.setItem('notion_last_error', JSON.stringify(error.message || 'Erreur 400'));
            toast.info('Conseil', {
              description: 'V√©rifiez que votre base Notion contient les propri√©t√©s correctes et que leurs types correspondent'
            });
          }
        }
      });
    }
    else if (error.message?.includes('404')) {
      title = 'Base de donn√©es introuvable';
      description = 'L\'ID de base de donn√©es Notion est incorrect ou cette base n\'existe plus';
      
      toast.error(title, {
        description,
        action: {
          label: 'Configurer',
          onClick: () => {
            const configButton = document.querySelector('[id="notion-config-button"]');
            if (configButton) {
              (configButton as HTMLButtonElement).click();
            }
          }
        }
      });
    }
    else if (error.message?.includes('CORS') || error.message?.includes('network')) {
      title = 'Probl√®me de connexion';
      description = 'Impossible d\'acc√©der √† l\'API Notion directement';
      
      toast.error(title, {
        description: `${description}. Mode d√©monstration activ√©.`
      });
      
      // Activer le mode mock en cas d'erreur CORS
      notionApi.mockMode.activate();
    }
    else {
      // Erreur g√©n√©rique
      toast.error(title, {
        description
      });
    }
  }
};
