
import { create } from 'zustand';
import { toast } from 'sonner';

interface OperationModeState {
  // √âtat
  isDemoMode: boolean;
  lastError: Error | null;
  lastErrorTimestamp: number | null;
  consecutiveErrors: number;
  
  // Actions
  enableDemoMode: (reason?: string) => void;
  enableRealMode: () => void;
  handleConnectionError: (error: Error, context?: string) => void;
  handleSuccessfulOperation: () => void;
}

const STORAGE_KEY = 'operation_mode';
const ERROR_THRESHOLD = 3; // Nombre d'erreurs cons√©cutives avant le passage automatique en mode d√©mo

// Charge l'√©tat depuis localStorage
const loadInitialState = (): { isDemoMode: boolean } => {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      return JSON.parse(stored);
    }
  } catch (e) {
    console.error('Erreur lors du chargement du mode d\'op√©ration:', e);
  }
  
  // Par d√©faut, d√©marrer en mode d√©mo pour √©viter les erreurs CORS
  return { isDemoMode: true };
};

// Sauvegarde l'√©tat dans localStorage
const saveState = (state: { isDemoMode: boolean }) => {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
  } catch (e) {
    console.error('Erreur lors de la sauvegarde du mode d\'op√©ration:', e);
  }
};

// Zustand store pour le mode d'op√©ration
export const useOperationMode = create<OperationModeState>((set, get) => ({
  // √âtat initial
  ...loadInitialState(),
  lastError: null,
  lastErrorTimestamp: null,
  consecutiveErrors: 0,
  
  // Active le mode d√©mo
  enableDemoMode: (reason?: string) => {
    const currentState = get();
    
    // Ne rien faire si d√©j√† en mode d√©mo
    if (currentState.isDemoMode) return;
    
    set({ isDemoMode: true });
    saveState({ isDemoMode: true });
    
    // Afficher un toast si une raison est fournie
    if (reason) {
      toast.info('Mode d√©monstration activ√©', {
        description: reason
      });
    }
    
    console.info('üì± Mode d√©monstration activ√©', reason ? `Raison: ${reason}` : '');
  },
  
  // Active le mode r√©el
  enableRealMode: () => {
    const currentState = get();
    
    // Ne rien faire si d√©j√† en mode r√©el
    if (!currentState.isDemoMode) return;
    
    set({ 
      isDemoMode: false,
      consecutiveErrors: 0,
      lastError: null,
      lastErrorTimestamp: null
    });
    saveState({ isDemoMode: false });
    
    console.info('üîå Mode r√©el activ√©');
  },
  
  // G√®re une erreur de connexion
  handleConnectionError: (error: Error, context?: string) => {
    const currentState = get();
    const now = Date.now();
    
    // Si d√©j√† en mode d√©mo, juste mettre √† jour l'erreur
    if (currentState.isDemoMode) {
      set({ 
        lastError: error,
        lastErrorTimestamp: now
      });
      return;
    }
    
    // Incr√©menter le compteur d'erreurs cons√©cutives
    const newConsecutiveErrors = currentState.consecutiveErrors + 1;
    
    // Mettre √† jour l'√©tat
    set({
      lastError: error,
      lastErrorTimestamp: now,
      consecutiveErrors: newConsecutiveErrors
    });
    
    console.error(
      `üõë Erreur de connexion ${newConsecutiveErrors}/${ERROR_THRESHOLD}`,
      context ? `Contexte: ${context}` : '',
      error
    );
    
    // Si le seuil d'erreurs est atteint, passer en mode d√©mo
    if (newConsecutiveErrors >= ERROR_THRESHOLD) {
      get().enableDemoMode('Trop d\'erreurs de connexion - passage en mode d√©monstration');
    }
  },
  
  // R√©initialise le compteur d'erreurs apr√®s une op√©ration r√©ussie
  handleSuccessfulOperation: () => {
    const currentState = get();
    
    // Ne rien faire si en mode d√©mo ou s'il n'y a pas d'erreurs
    if (currentState.isDemoMode || currentState.consecutiveErrors === 0) {
      return;
    }
    
    set({ consecutiveErrors: 0 });
    console.info('‚úÖ Op√©ration r√©ussie - compteur d\'erreurs r√©initialis√©');
  }
}));

// Exporter une instance singleton pour compatibilit√© avec le code existant
export const operationMode = {
  get isDemoMode() { return useOperationMode.getState().isDemoMode; },
  enableDemoMode: useOperationMode.getState().enableDemoMode,
  enableRealMode: useOperationMode.getState().enableRealMode,
  handleConnectionError: useOperationMode.getState().handleConnectionError,
  handleSuccessfulOperation: useOperationMode.getState().handleSuccessfulOperation
};
