
/**
 * Formatage des rapports d'analyse d'architecture
 */
import { PhaseVerificationResult } from '../types';

/**
 * Formate un timestamp pour le nom de fichier
 */
export function formatTimestampForFilename(): string {
  return new Date().toISOString().replace(/[:.]/g, '-');
}

/**
 * G√©n√®re le contenu du rapport markdown
 */
export function generateMarkdownReport(
  phaseName: string, 
  result: PhaseVerificationResult
): string {
  return `# Rapport de v√©rification - ${phaseName}
  
Date: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}

## R√©sum√©

**Statut**: ${result.completed ? '‚úÖ TERMIN√âE' : 'üîÑ EN COURS'}
**Score**: ${result.score}/${result.maxScore} (${result.percentage}%)

## Indicateurs de succ√®s

${result.results.map(r => `- ${r.passed ? '‚úÖ' : '‚ùå'} **${r.name}** (${r.weight} points)\n`).join('')}

## Recommandations

${result.percentage < 100 ? `Pour atteindre 100%, il faut travailler sur les indicateurs suivants:
${result.results.filter(r => !r.passed).map(r => `- ${r.name}\n`).join('')}` : 'Tous les indicateurs sont valid√©s. La phase est termin√©e avec succ√®s!'}

---
Rapport g√©n√©r√© automatiquement par le script de v√©rification d'architecture.
`;
}
