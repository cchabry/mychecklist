
// Ajoutons des logs au mockMode adapter et am√©liorons la gestion des for√ßages temporaires

import { operationMode } from '@/services/operationMode';

/**
 * Adaptateur de compatibilit√© pour l'ancien syst√®me mockMode
 * @deprecated Utilisez operationMode directement
 */
export const mockMode = {
  // Statut du for√ßage temporaire pour la compatibilit√©
  _tempForcedRealStatus: false,
  
  /**
   * V√©rifie si le mode mock est actif
   */
  isActive(): boolean {
    const isDemoMode = operationMode.isDemoMode;
    console.log('üîç [DEBUG] mockMode.isActive() appel√© - retourne:', isDemoMode);
    return isDemoMode;
  },
  
  /**
   * Active le mode mock
   */
  activate(): void {
    console.log('üîç [DEBUG] mockMode.activate() appel√©');
    operationMode.enableDemoMode('Activ√© via ancien API mockMode');
    console.log('üîç [DEBUG] Apr√®s enableDemoMode, mode actif?', operationMode.isDemoMode);
  },
  
  /**
   * D√©sactive le mode mock
   */
  deactivate(): void {
    console.log('üîç [DEBUG] mockMode.deactivate() appel√©');
    operationMode.enableRealMode();
    console.log('üîç [DEBUG] Apr√®s enableRealMode, mode actif?', operationMode.isDemoMode);
  },
  
  /**
   * Bascule le mode mock
   */
  toggle(): void {
    console.log('üîç [DEBUG] mockMode.toggle() appel√©');
    operationMode.toggle();
    console.log('üîç [DEBUG] Apr√®s toggle, mode actif?', operationMode.isDemoMode);
  },
  
  /**
   * Force la r√©initialisation du mode mock
   */
  forceReset(): void {
    console.log('üîç [DEBUG] mockMode.forceReset() appel√©');
    operationMode.setDemoMode(false);
    operationMode.reset();
    this._tempForcedRealStatus = false;
    console.log('üîç [DEBUG] Apr√®s reset, mode actif?', operationMode.isDemoMode);
  },
  
  /**
   * Persiste le mode mock
   */
  persist(): void {
    console.log('üîç [DEBUG] mockMode.persist() appel√©');
    // Rien √† faire, operationMode s'en charge
    operationMode.updateSettings({ persistentModeStorage: true });
  },
  
  /**
   * Met √† jour la configuration du mode mock
   */
  updateConfig(config: any): void {
    console.log('üîç [DEBUG] mockMode.updateConfig() appel√© (d√©pr√©ci√©)');
    // Rien √† faire, le concept √©quivalent n'existe plus
    console.warn('[DEPRECATED] mockMode.updateConfig is deprecated and has no effect');
  },
  
  /**
   * Force temporairement le mode r√©el (utile pour certaines op√©rations)
   */
  temporarilyForceReal(): void {
    console.log('üîç [DEBUG] mockMode.temporarilyForceReal() appel√©');
    this._tempForcedRealStatus = true;
    operationMode.temporarilyForceReal();
    console.log('üîç [DEBUG] Apr√®s temporarilyForceReal, mode actif?', operationMode.isDemoMode);
  },
  
  /**
   * V√©rifie si le mode r√©el est temporairement forc√©
   */
  isTemporarilyForcedReal(reset: boolean = false): boolean {
    console.log('üîç [DEBUG] mockMode.isTemporarilyForcedReal() appel√©', 
      reset ? '(avec reset)' : '');
    
    const status = this._tempForcedRealStatus;
    
    if (reset && status) {
      this._tempForcedRealStatus = false;
      console.log('üîç [DEBUG] R√©initialisation du statut de for√ßage temporaire');
    }
    
    return status;
  },
  
  /**
   * Restore le mode apr√®s un for√ßage temporaire
   */
  restoreAfterForceReal(restore: boolean = true): void {
    console.log('üîç [DEBUG] mockMode.restoreAfterForceReal() appel√© avec restore =', restore);
    
    // V√©rifier si nous √©tions en for√ßage temporaire
    if (this._tempForcedRealStatus) {
      this._tempForcedRealStatus = false;
      
      if (restore) {
        operationMode.setDemoMode(true);
        console.log('üîç [DEBUG] Apr√®s setDemoMode(true), mode actif?', operationMode.isDemoMode);
      } else {
        console.log('üîç [DEBUG] Restauration annul√©e, mode actif?', operationMode.isDemoMode);
      }
    } else {
      console.log('üîç [DEBUG] Aucun for√ßage temporaire √† restaurer');
    }
  }
};

export default mockMode;
