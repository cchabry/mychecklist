
import { notionApi } from '@/lib/notionProxy';
import { toast } from 'sonner';

interface DiagnosticResult {
  success: boolean;
  message: string;
  details?: Record<string, any>;
}

/**
 * Utilitaire pour diagnostiquer et r√©soudre les probl√®mes de connexion √† Notion
 */
export const notionDiagnostic = {
  /**
   * V√©rifie la configuration Notion compl√®te et teste les bases de donn√©es
   */
  async runFullDiagnostic(): Promise<DiagnosticResult> {
    // D√©sactiver temporairement le mode mock pour les tests
    const wasMockEnabled = notionApi.mockMode.isActive();
    if (wasMockEnabled) {
      notionApi.mockMode.forceReset();
      console.log('üîç Diagnostic: Mode mock temporairement d√©sactiv√© pour les tests');
    }
    
    const apiKey = localStorage.getItem('notion_api_key');
    const projectsDbId = localStorage.getItem('notion_database_id');
    const checklistsDbId = localStorage.getItem('notion_checklists_database_id');
    
    if (!apiKey || !projectsDbId) {
      return {
        success: false,
        message: 'Configuration Notion incompl√®te',
        details: {
          hasApiKey: !!apiKey,
          hasProjectsDbId: !!projectsDbId,
          hasChecklistsDbId: !!checklistsDbId
        }
      };
    }
    
    try {
      // Tester la connexion √† l'API Notion
      const user = await notionApi.users.me(apiKey);
      console.log('‚úÖ Connexion √† l\'API Notion r√©ussie:', user.name);
      
      // Tester l'acc√®s aux bases de donn√©es
      let databasesStatus = {
        projects: { success: false, name: '', error: '' },
        checklists: { success: false, name: '', error: '' }
      };
      
      // Tester la base de projets
      try {
        const projectsDb = await notionApi.databases.retrieve(projectsDbId, apiKey);
        databasesStatus.projects = {
          success: true,
          name: projectsDb.title?.[0]?.plain_text || projectsDbId,
          error: ''
        };
        console.log('‚úÖ Acc√®s √† la base de projets r√©ussi:', databasesStatus.projects.name);
        
        // V√©rifier les propri√©t√©s essentielles pour les projets
        const missingProps = this.checkRequiredProperties(
          projectsDb.properties,
          ['Name', 'URL', 'Progress']
        );
        
        if (missingProps.length > 0) {
          console.warn('‚ö†Ô∏è Propri√©t√©s manquantes dans la base de projets:', missingProps);
          databasesStatus.projects.error = `Propri√©t√©s manquantes: ${missingProps.join(', ')}`;
        }
      } catch (error) {
        console.error('‚ùå √âchec d\'acc√®s √† la base de projets:', error);
        databasesStatus.projects = {
          success: false,
          name: '',
          error: error.message || 'Erreur d\'acc√®s √† la base de projets'
        };
      }
      
      // Tester la base de checklists si configur√©e
      if (checklistsDbId) {
        try {
          const checklistsDb = await notionApi.databases.retrieve(checklistsDbId, apiKey);
          databasesStatus.checklists = {
            success: true,
            name: checklistsDb.title?.[0]?.plain_text || checklistsDbId,
            error: ''
          };
          console.log('‚úÖ Acc√®s √† la base de checklists r√©ussi:', databasesStatus.checklists.name);
          
          // V√©rifier les propri√©t√©s essentielles pour les checklists
          const missingProps = this.checkRequiredProperties(
            checklistsDb.properties,
            ['Name', 'Description', 'Category']
          );
          
          if (missingProps.length > 0) {
            console.warn('‚ö†Ô∏è Propri√©t√©s manquantes dans la base de checklists:', missingProps);
            databasesStatus.checklists.error = `Propri√©t√©s manquantes: ${missingProps.join(', ')}`;
          }
        } catch (error) {
          console.error('‚ùå √âchec d\'acc√®s √† la base de checklists:', error);
          databasesStatus.checklists = {
            success: false,
            name: '',
            error: error.message || 'Erreur d\'acc√®s √† la base de checklists'
          };
        }
      }
      
      // V√©rifier si on peut r√©cup√©rer des projets
      let projectsData = { count: 0, error: '' };
      try {
        const projects = await notionApi.databases.query(projectsDbId, {}, apiKey);
        projectsData.count = projects.results.length;
        console.log(`‚úÖ ${projectsData.count} projets trouv√©s dans la base`);
      } catch (error) {
        console.error('‚ùå √âchec de r√©cup√©ration des projets:', error);
        projectsData.error = error.message || 'Erreur de requ√™te sur la base de projets';
      }
      
      // Restaurer le mode mock si n√©cessaire
      if (wasMockEnabled) {
        notionApi.mockMode.activate();
        console.log('üîç Diagnostic: Mode mock restaur√© √† son √©tat initial');
      }
      
      // D√©terminer le succ√®s global
      const isSuccessful = databasesStatus.projects.success && 
                          (!checklistsDbId || databasesStatus.checklists.success) &&
                          !projectsData.error;
      
      return {
        success: isSuccessful,
        message: isSuccessful ? 'Diagnostic Notion r√©ussi' : 'Probl√®mes d√©tect√©s avec Notion',
        details: {
          user: user.name,
          databases: databasesStatus,
          projects: projectsData
        }
      };
    } catch (error) {
      console.error('‚ùå √âchec du diagnostic Notion:', error);
      
      // Restaurer le mode mock si n√©cessaire
      if (wasMockEnabled) {
        notionApi.mockMode.activate();
        console.log('üîç Diagnostic: Mode mock restaur√© apr√®s erreur');
      }
      
      return {
        success: false,
        message: 'Erreur lors du diagnostic Notion',
        details: {
          error: error.message || 'Erreur inconnue'
        }
      };
    }
  },
  
  /**
   * V√©rifie si des propri√©t√©s requises sont pr√©sentes dans un objet properties de Notion
   */
  checkRequiredProperties(properties: Record<string, any>, requiredProps: string[]): string[] {
    if (!properties) return requiredProps;
    
    const allPropKeys = Object.keys(properties);
    const missingProps: string[] = [];
    
    for (const prop of requiredProps) {
      // Chercher la propri√©t√© en ignorant la casse
      const found = allPropKeys.some(key => 
        key.toLowerCase() === prop.toLowerCase() ||
        key.toLowerCase() === prop.toLowerCase() + 's'
      );
      
      if (!found) {
        missingProps.push(prop);
      }
    }
    
    return missingProps;
  },
  
  /**
   * Tente de r√©parer les probl√®mes de configuration Notion
   */
  async fixNotionIssues(): Promise<boolean> {
    try {
      // Forcer la d√©sactivation du mode mock
      notionApi.mockMode.forceReset();
      localStorage.removeItem('notion_mock_mode');
      localStorage.removeItem('notion_last_error');
      
      // V√©rifier que la connexion est maintenant possible
      const result = await this.runFullDiagnostic();
      
      if (result.success) {
        toast.success('Probl√®mes Notion r√©solus', {
          description: 'La connexion fonctionne maintenant correctement'
        });
        return true;
      } else {
        // Si √©chec, proposer d'activer le mode mock explicitement
        toast.error('Probl√®mes persistants avec Notion', {
          description: result.message,
          action: {
            label: 'Utiliser Mode D√©mo',
            onClick: () => {
              notionApi.mockMode.activate();
              toast.info('Mode d√©monstration activ√©', {
                description: 'L\'application utilise maintenant des donn√©es fictives'
              });
              // Forcer un rechargement de la page
              setTimeout(() => window.location.reload(), 1500);
            }
          }
        });
        return false;
      }
    } catch (error) {
      console.error('‚ùå √âchec de r√©paration des probl√®mes Notion:', error);
      toast.error('√âchec de r√©paration', {
        description: error.message || 'Une erreur est survenue lors de la r√©paration'
      });
      return false;
    }
  }
};
